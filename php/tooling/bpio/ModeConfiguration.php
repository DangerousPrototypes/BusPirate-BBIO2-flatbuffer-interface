<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace bpio;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class ModeConfiguration extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return ModeConfiguration
     */
    public static function getRootAsModeConfiguration(ByteBuffer $bb)
    {
        $obj = new ModeConfiguration();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return ModeConfiguration
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return uint
     */
    public function getSpeed()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getUint($o + $this->bb_pos) : 20000;
    }

    /**
     * @return byte
     */
    public function getDataBits()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : 8;
    }

    /**
     * @return bool
     */
    public function getParity()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /**
     * @return byte
     */
    public function getStopBits()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : 1;
    }

    /**
     * @return bool
     */
    public function getFlowControl()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /**
     * @return bool
     */
    public function getSignalInversion()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /**
     * @return bool
     */
    public function getClockStretch()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /**
     * @return bool
     */
    public function getClockPolarity()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /**
     * @return bool
     */
    public function getClockPhase()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /**
     * @return bool
     */
    public function getChipSelectIdle()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : true;
    }

    /**
     * @return byte
     */
    public function getSubmode()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : 0;
    }

    /**
     * @return uint
     */
    public function getTxModulation()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getUint($o + $this->bb_pos) : 0;
    }

    /**
     * @return byte
     */
    public function getRxSensor()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startModeConfiguration(FlatBufferBuilder $builder)
    {
        $builder->StartObject(13);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return ModeConfiguration
     */
    public static function createModeConfiguration(FlatBufferBuilder $builder, $speed, $data_bits, $parity, $stop_bits, $flow_control, $signal_inversion, $clock_stretch, $clock_polarity, $clock_phase, $chip_select_idle, $submode, $tx_modulation, $rx_sensor)
    {
        $builder->startObject(13);
        self::addSpeed($builder, $speed);
        self::addDataBits($builder, $data_bits);
        self::addParity($builder, $parity);
        self::addStopBits($builder, $stop_bits);
        self::addFlowControl($builder, $flow_control);
        self::addSignalInversion($builder, $signal_inversion);
        self::addClockStretch($builder, $clock_stretch);
        self::addClockPolarity($builder, $clock_polarity);
        self::addClockPhase($builder, $clock_phase);
        self::addChipSelectIdle($builder, $chip_select_idle);
        self::addSubmode($builder, $submode);
        self::addTxModulation($builder, $tx_modulation);
        self::addRxSensor($builder, $rx_sensor);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param uint
     * @return void
     */
    public static function addSpeed(FlatBufferBuilder $builder, $speed)
    {
        $builder->addUintX(0, $speed, 20000);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addDataBits(FlatBufferBuilder $builder, $dataBits)
    {
        $builder->addByteX(1, $dataBits, 8);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addParity(FlatBufferBuilder $builder, $parity)
    {
        $builder->addBoolX(2, $parity, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addStopBits(FlatBufferBuilder $builder, $stopBits)
    {
        $builder->addByteX(3, $stopBits, 1);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addFlowControl(FlatBufferBuilder $builder, $flowControl)
    {
        $builder->addBoolX(4, $flowControl, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addSignalInversion(FlatBufferBuilder $builder, $signalInversion)
    {
        $builder->addBoolX(5, $signalInversion, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addClockStretch(FlatBufferBuilder $builder, $clockStretch)
    {
        $builder->addBoolX(6, $clockStretch, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addClockPolarity(FlatBufferBuilder $builder, $clockPolarity)
    {
        $builder->addBoolX(7, $clockPolarity, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addClockPhase(FlatBufferBuilder $builder, $clockPhase)
    {
        $builder->addBoolX(8, $clockPhase, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addChipSelectIdle(FlatBufferBuilder $builder, $chipSelectIdle)
    {
        $builder->addBoolX(9, $chipSelectIdle, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addSubmode(FlatBufferBuilder $builder, $submode)
    {
        $builder->addByteX(10, $submode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param uint
     * @return void
     */
    public static function addTxModulation(FlatBufferBuilder $builder, $txModulation)
    {
        $builder->addUintX(11, $txModulation, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addRxSensor(FlatBufferBuilder $builder, $rxSensor)
    {
        $builder->addByteX(12, $rxSensor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endModeConfiguration(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
