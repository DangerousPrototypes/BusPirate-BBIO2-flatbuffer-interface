<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace bpio;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class StatusResponse extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return StatusResponse
     */
    public static function getRootAsStatusResponse(ByteBuffer $bb)
    {
        $obj = new StatusResponse();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return StatusResponse
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    public function getError()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return byte
     */
    public function getHardwareVersionMajor()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : 0;
    }

    /**
     * @return byte
     */
    public function getHardwareVersionMinor()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : 0;
    }

    /**
     * @return byte
     */
    public function getFirmwareVersionMajor()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : 0;
    }

    /**
     * @return byte
     */
    public function getFirmwareVersionMinor()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : 0;
    }

    public function getFirmwareGitHash()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getFirmwareDate()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param int offset
     * @return string
     */
    public function getModesAvailable($j)
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getModesAvailableLength()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    public function getModeCurrent()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param int offset
     * @return string
     */
    public function getModePinLabels($j)
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getModePinLabelsLength()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return bool
     */
    public function getModeBitorderMsb()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /**
     * @return bool
     */
    public function getPsuEnabled()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /**
     * @return uint
     */
    public function getPsuSetMv()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getUint($o + $this->bb_pos) : 0;
    }

    /**
     * @return uint
     */
    public function getPsuSetMa()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getUint($o + $this->bb_pos) : 0;
    }

    /**
     * @return uint
     */
    public function getPsuMeasuredMv()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getUint($o + $this->bb_pos) : 0;
    }

    /**
     * @return uint
     */
    public function getPsuMeasuredMa()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getUint($o + $this->bb_pos) : 0;
    }

    /**
     * @return bool
     */
    public function getPsuCurrentError()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /**
     * @return bool
     */
    public function getPullupEnabled()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /**
     * @return uint
     */
    public function getPullxConfig()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getUint($o + $this->bb_pos) : 0;
    }

    /**
     * @param int offset
     * @return uint
     */
    public function getAdcMv($j)
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getUint($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getAdcMvLength()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return byte
     */
    public function getIoDirection()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : 0;
    }

    /**
     * @return byte
     */
    public function getIoValue()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : 0;
    }

    /**
     * @return float
     */
    public function getDiskSizeMb()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return float
     */
    public function getDiskUsedMb()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return byte
     */
    public function getLedCount()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startStatusResponse(FlatBufferBuilder $builder)
    {
        $builder->StartObject(25);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return StatusResponse
     */
    public static function createStatusResponse(FlatBufferBuilder $builder, $error, $hardware_version_major, $hardware_version_minor, $firmware_version_major, $firmware_version_minor, $firmware_git_hash, $firmware_date, $modes_available, $mode_current, $mode_pin_labels, $mode_bitorder_msb, $psu_enabled, $psu_set_mv, $psu_set_ma, $psu_measured_mv, $psu_measured_ma, $psu_current_error, $pullup_enabled, $pullx_config, $adc_mv, $io_direction, $io_value, $disk_size_mb, $disk_used_mb, $led_count)
    {
        $builder->startObject(25);
        self::addError($builder, $error);
        self::addHardwareVersionMajor($builder, $hardware_version_major);
        self::addHardwareVersionMinor($builder, $hardware_version_minor);
        self::addFirmwareVersionMajor($builder, $firmware_version_major);
        self::addFirmwareVersionMinor($builder, $firmware_version_minor);
        self::addFirmwareGitHash($builder, $firmware_git_hash);
        self::addFirmwareDate($builder, $firmware_date);
        self::addModesAvailable($builder, $modes_available);
        self::addModeCurrent($builder, $mode_current);
        self::addModePinLabels($builder, $mode_pin_labels);
        self::addModeBitorderMsb($builder, $mode_bitorder_msb);
        self::addPsuEnabled($builder, $psu_enabled);
        self::addPsuSetMv($builder, $psu_set_mv);
        self::addPsuSetMa($builder, $psu_set_ma);
        self::addPsuMeasuredMv($builder, $psu_measured_mv);
        self::addPsuMeasuredMa($builder, $psu_measured_ma);
        self::addPsuCurrentError($builder, $psu_current_error);
        self::addPullupEnabled($builder, $pullup_enabled);
        self::addPullxConfig($builder, $pullx_config);
        self::addAdcMv($builder, $adc_mv);
        self::addIoDirection($builder, $io_direction);
        self::addIoValue($builder, $io_value);
        self::addDiskSizeMb($builder, $disk_size_mb);
        self::addDiskUsedMb($builder, $disk_used_mb);
        self::addLedCount($builder, $led_count);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addError(FlatBufferBuilder $builder, $error)
    {
        $builder->addOffsetX(0, $error, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addHardwareVersionMajor(FlatBufferBuilder $builder, $hardwareVersionMajor)
    {
        $builder->addByteX(1, $hardwareVersionMajor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addHardwareVersionMinor(FlatBufferBuilder $builder, $hardwareVersionMinor)
    {
        $builder->addByteX(2, $hardwareVersionMinor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addFirmwareVersionMajor(FlatBufferBuilder $builder, $firmwareVersionMajor)
    {
        $builder->addByteX(3, $firmwareVersionMajor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addFirmwareVersionMinor(FlatBufferBuilder $builder, $firmwareVersionMinor)
    {
        $builder->addByteX(4, $firmwareVersionMinor, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFirmwareGitHash(FlatBufferBuilder $builder, $firmwareGitHash)
    {
        $builder->addOffsetX(5, $firmwareGitHash, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFirmwareDate(FlatBufferBuilder $builder, $firmwareDate)
    {
        $builder->addOffsetX(6, $firmwareDate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addModesAvailable(FlatBufferBuilder $builder, $modesAvailable)
    {
        $builder->addOffsetX(7, $modesAvailable, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createModesAvailableVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startModesAvailableVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addModeCurrent(FlatBufferBuilder $builder, $modeCurrent)
    {
        $builder->addOffsetX(8, $modeCurrent, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addModePinLabels(FlatBufferBuilder $builder, $modePinLabels)
    {
        $builder->addOffsetX(9, $modePinLabels, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createModePinLabelsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startModePinLabelsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addModeBitorderMsb(FlatBufferBuilder $builder, $modeBitorderMsb)
    {
        $builder->addBoolX(10, $modeBitorderMsb, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addPsuEnabled(FlatBufferBuilder $builder, $psuEnabled)
    {
        $builder->addBoolX(11, $psuEnabled, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param uint
     * @return void
     */
    public static function addPsuSetMv(FlatBufferBuilder $builder, $psuSetMv)
    {
        $builder->addUintX(12, $psuSetMv, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param uint
     * @return void
     */
    public static function addPsuSetMa(FlatBufferBuilder $builder, $psuSetMa)
    {
        $builder->addUintX(13, $psuSetMa, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param uint
     * @return void
     */
    public static function addPsuMeasuredMv(FlatBufferBuilder $builder, $psuMeasuredMv)
    {
        $builder->addUintX(14, $psuMeasuredMv, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param uint
     * @return void
     */
    public static function addPsuMeasuredMa(FlatBufferBuilder $builder, $psuMeasuredMa)
    {
        $builder->addUintX(15, $psuMeasuredMa, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addPsuCurrentError(FlatBufferBuilder $builder, $psuCurrentError)
    {
        $builder->addBoolX(16, $psuCurrentError, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addPullupEnabled(FlatBufferBuilder $builder, $pullupEnabled)
    {
        $builder->addBoolX(17, $pullupEnabled, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param uint
     * @return void
     */
    public static function addPullxConfig(FlatBufferBuilder $builder, $pullxConfig)
    {
        $builder->addUintX(18, $pullxConfig, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAdcMv(FlatBufferBuilder $builder, $adcMv)
    {
        $builder->addOffsetX(19, $adcMv, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAdcMvVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putUint($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAdcMvVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addIoDirection(FlatBufferBuilder $builder, $ioDirection)
    {
        $builder->addByteX(20, $ioDirection, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addIoValue(FlatBufferBuilder $builder, $ioValue)
    {
        $builder->addByteX(21, $ioValue, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addDiskSizeMb(FlatBufferBuilder $builder, $diskSizeMb)
    {
        $builder->addFloatX(22, $diskSizeMb, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addDiskUsedMb(FlatBufferBuilder $builder, $diskUsedMb)
    {
        $builder->addFloatX(23, $diskUsedMb, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addLedCount(FlatBufferBuilder $builder, $ledCount)
    {
        $builder->addByteX(24, $ledCount, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endStatusResponse(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
