<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace bpio;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class DataRequest extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return DataRequest
     */
    public static function getRootAsDataRequest(ByteBuffer $bb)
    {
        $obj = new DataRequest();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return DataRequest
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return bool
     */
    public function getStartMain()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /**
     * @return bool
     */
    public function getStartAlt()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /**
     * @param int offset
     * @return byte
     */
    public function getDataWrite($j)
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getByte($this->__vector($o) + $j * 1) : 0;
    }

    /**
     * @return int
     */
    public function getDataWriteLength()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return string
     */
    public function getDataWriteBytes()
    {
        return $this->__vector_as_bytes(8);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startDataRequest(FlatBufferBuilder $builder)
    {
        $builder->StartObject(3);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return DataRequest
     */
    public static function createDataRequest(FlatBufferBuilder $builder, $start_main, $start_alt, $data_write)
    {
        $builder->startObject(3);
        self::addStartMain($builder, $start_main);
        self::addStartAlt($builder, $start_alt);
        self::addDataWrite($builder, $data_write);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addStartMain(FlatBufferBuilder $builder, $startMain)
    {
        $builder->addBoolX(0, $startMain, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addStartAlt(FlatBufferBuilder $builder, $startAlt)
    {
        $builder->addBoolX(1, $startAlt, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addDataWrite(FlatBufferBuilder $builder, $dataWrite)
    {
        $builder->addOffsetX(2, $dataWrite, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createDataWriteVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(1, count($data), 1);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putByte($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startDataWriteVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(1, $numElems, 1);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endDataRequest(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
