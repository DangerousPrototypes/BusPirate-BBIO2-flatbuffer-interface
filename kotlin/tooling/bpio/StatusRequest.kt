// automatically generated by the FlatBuffers compiler, do not modify

package bpio

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class StatusRequest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : StatusRequest {
        __init(_i, _bb)
        return this
    }
    fun query(j: Int) : Byte {
        val o = __offset(4)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1)
        } else {
            0
        }
    }
    val queryLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    val queryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun queryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsStatusRequest(_bb: ByteBuffer): StatusRequest = getRootAsStatusRequest(_bb, StatusRequest())
        fun getRootAsStatusRequest(_bb: ByteBuffer, obj: StatusRequest): StatusRequest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createStatusRequest(builder: FlatBufferBuilder, queryOffset: Int) : Int {
            builder.startTable(1)
            addQuery(builder, queryOffset)
            return endStatusRequest(builder)
        }
        fun startStatusRequest(builder: FlatBufferBuilder) = builder.startTable(1)
        fun addQuery(builder: FlatBufferBuilder, query: Int) = builder.addOffset(0, query, 0)
        fun createQueryVector(builder: FlatBufferBuilder, data: ByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i])
            }
            return builder.endVector()
        }
        fun startQueryVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        fun endStatusRequest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
