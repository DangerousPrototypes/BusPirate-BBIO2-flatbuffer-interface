// automatically generated by the FlatBuffers compiler, do not modify

package bpio

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class ModeConfiguration : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ModeConfiguration {
        __init(_i, _bb)
        return this
    }
    val speed : UInt
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 20000u
        }
    val dataBits : UByte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 8u
        }
    val parity : Boolean
        get() {
            val o = __offset(8)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val stopBits : UByte
        get() {
            val o = __offset(10)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 1u
        }
    val flowControl : Boolean
        get() {
            val o = __offset(12)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val signalInversion : Boolean
        get() {
            val o = __offset(14)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val submode : UByte
        get() {
            val o = __offset(16)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    val txModulation : UInt
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    val rxSensor : UByte
        get() {
            val o = __offset(20)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsModeConfiguration(_bb: ByteBuffer): ModeConfiguration = getRootAsModeConfiguration(_bb, ModeConfiguration())
        fun getRootAsModeConfiguration(_bb: ByteBuffer, obj: ModeConfiguration): ModeConfiguration {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createModeConfiguration(builder: FlatBufferBuilder, speed: UInt, dataBits: UByte, parity: Boolean, stopBits: UByte, flowControl: Boolean, signalInversion: Boolean, submode: UByte, txModulation: UInt, rxSensor: UByte) : Int {
            builder.startTable(9)
            addTxModulation(builder, txModulation)
            addSpeed(builder, speed)
            addRxSensor(builder, rxSensor)
            addSubmode(builder, submode)
            addSignalInversion(builder, signalInversion)
            addFlowControl(builder, flowControl)
            addStopBits(builder, stopBits)
            addParity(builder, parity)
            addDataBits(builder, dataBits)
            return endModeConfiguration(builder)
        }
        fun startModeConfiguration(builder: FlatBufferBuilder) = builder.startTable(9)
        fun addSpeed(builder: FlatBufferBuilder, speed: UInt) = builder.addInt(0, speed.toInt(), 20000)
        fun addDataBits(builder: FlatBufferBuilder, dataBits: UByte) = builder.addByte(1, dataBits.toByte(), 8)
        fun addParity(builder: FlatBufferBuilder, parity: Boolean) = builder.addBoolean(2, parity, false)
        fun addStopBits(builder: FlatBufferBuilder, stopBits: UByte) = builder.addByte(3, stopBits.toByte(), 1)
        fun addFlowControl(builder: FlatBufferBuilder, flowControl: Boolean) = builder.addBoolean(4, flowControl, false)
        fun addSignalInversion(builder: FlatBufferBuilder, signalInversion: Boolean) = builder.addBoolean(5, signalInversion, false)
        fun addSubmode(builder: FlatBufferBuilder, submode: UByte) = builder.addByte(6, submode.toByte(), 0)
        fun addTxModulation(builder: FlatBufferBuilder, txModulation: UInt) = builder.addInt(7, txModulation.toInt(), 0)
        fun addRxSensor(builder: FlatBufferBuilder, rxSensor: UByte) = builder.addByte(8, rxSensor.toByte(), 0)
        fun endModeConfiguration(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
