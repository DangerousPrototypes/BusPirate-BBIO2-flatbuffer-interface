// automatically generated by the FlatBuffers compiler, do not modify

package bpio

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class DataRequest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DataRequest {
        __init(_i, _bb)
        return this
    }
    val startMain : Boolean
        get() {
            val o = __offset(4)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val startAlt : Boolean
        get() {
            val o = __offset(6)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    fun dataWrite(j: Int) : UByte {
        val o = __offset(8)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }
    val dataWriteLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    val dataWriteAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun dataWriteInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    val bytesRead : UShort
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    val stopMain : Boolean
        get() {
            val o = __offset(12)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val stopAlt : Boolean
        get() {
            val o = __offset(14)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsDataRequest(_bb: ByteBuffer): DataRequest = getRootAsDataRequest(_bb, DataRequest())
        fun getRootAsDataRequest(_bb: ByteBuffer, obj: DataRequest): DataRequest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createDataRequest(builder: FlatBufferBuilder, startMain: Boolean, startAlt: Boolean, dataWriteOffset: Int, bytesRead: UShort, stopMain: Boolean, stopAlt: Boolean) : Int {
            builder.startTable(6)
            addDataWrite(builder, dataWriteOffset)
            addBytesRead(builder, bytesRead)
            addStopAlt(builder, stopAlt)
            addStopMain(builder, stopMain)
            addStartAlt(builder, startAlt)
            addStartMain(builder, startMain)
            return endDataRequest(builder)
        }
        fun startDataRequest(builder: FlatBufferBuilder) = builder.startTable(6)
        fun addStartMain(builder: FlatBufferBuilder, startMain: Boolean) = builder.addBoolean(0, startMain, false)
        fun addStartAlt(builder: FlatBufferBuilder, startAlt: Boolean) = builder.addBoolean(1, startAlt, false)
        fun addDataWrite(builder: FlatBufferBuilder, dataWrite: Int) = builder.addOffset(2, dataWrite, 0)
        @kotlin.ExperimentalUnsignedTypes
        fun createDataWriteVector(builder: FlatBufferBuilder, data: UByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }
        fun startDataWriteVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        fun addBytesRead(builder: FlatBufferBuilder, bytesRead: UShort) = builder.addShort(3, bytesRead.toShort(), 0)
        fun addStopMain(builder: FlatBufferBuilder, stopMain: Boolean) = builder.addBoolean(4, stopMain, false)
        fun addStopAlt(builder: FlatBufferBuilder, stopAlt: Boolean) = builder.addBoolean(5, stopAlt, false)
        fun endDataRequest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
