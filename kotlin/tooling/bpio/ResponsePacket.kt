// automatically generated by the FlatBuffers compiler, do not modify

package bpio

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class ResponsePacket : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ResponsePacket {
        __init(_i, _bb)
        return this
    }
    val versionMajor : UByte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    val versionMinor : UByte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 1u
        }
    val contentsType : UByte
        get() {
            val o = __offset(8)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    fun contents(obj: Table) : Table? {
        val o = __offset(10); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsResponsePacket(_bb: ByteBuffer): ResponsePacket = getRootAsResponsePacket(_bb, ResponsePacket())
        fun getRootAsResponsePacket(_bb: ByteBuffer, obj: ResponsePacket): ResponsePacket {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createResponsePacket(builder: FlatBufferBuilder, versionMajor: UByte, versionMinor: UByte, contentsType: UByte, contentsOffset: Int) : Int {
            builder.startTable(4)
            addContents(builder, contentsOffset)
            addContentsType(builder, contentsType)
            addVersionMinor(builder, versionMinor)
            addVersionMajor(builder, versionMajor)
            return endResponsePacket(builder)
        }
        fun startResponsePacket(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addVersionMajor(builder: FlatBufferBuilder, versionMajor: UByte) = builder.addByte(0, versionMajor.toByte(), 0)
        fun addVersionMinor(builder: FlatBufferBuilder, versionMinor: UByte) = builder.addByte(1, versionMinor.toByte(), 1)
        fun addContentsType(builder: FlatBufferBuilder, contentsType: UByte) = builder.addByte(2, contentsType.toByte(), 0)
        fun addContents(builder: FlatBufferBuilder, contents: Int) = builder.addOffset(3, contents, 0)
        fun endResponsePacket(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishResponsePacketBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset)
        fun finishSizePrefixedResponsePacketBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset)
    }
}
