// automatically generated by the FlatBuffers compiler, do not modify

package bpio

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class DataResponse : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DataResponse {
        __init(_i, _bb)
        return this
    }
    val error : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val errorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun errorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    fun dataRead(j: Int) : UByte {
        val o = __offset(6)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }
    val dataReadLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    val dataReadAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun dataReadInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsDataResponse(_bb: ByteBuffer): DataResponse = getRootAsDataResponse(_bb, DataResponse())
        fun getRootAsDataResponse(_bb: ByteBuffer, obj: DataResponse): DataResponse {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createDataResponse(builder: FlatBufferBuilder, errorOffset: Int, dataReadOffset: Int) : Int {
            builder.startTable(2)
            addDataRead(builder, dataReadOffset)
            addError(builder, errorOffset)
            return endDataResponse(builder)
        }
        fun startDataResponse(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addError(builder: FlatBufferBuilder, error: Int) = builder.addOffset(0, error, 0)
        fun addDataRead(builder: FlatBufferBuilder, dataRead: Int) = builder.addOffset(1, dataRead, 0)
        @kotlin.ExperimentalUnsignedTypes
        fun createDataReadVector(builder: FlatBufferBuilder, data: UByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }
        fun startDataReadVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        fun endDataResponse(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
