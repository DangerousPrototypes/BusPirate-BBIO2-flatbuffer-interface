// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package bpio

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ResponsePacket struct {
	_tab flatbuffers.Table
}

func GetRootAsResponsePacket(buf []byte, offset flatbuffers.UOffsetT) *ResponsePacket {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ResponsePacket{}
	x.Init(buf, n+offset)
	return x
}

func FinishResponsePacketBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsResponsePacket(buf []byte, offset flatbuffers.UOffsetT) *ResponsePacket {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ResponsePacket{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedResponsePacketBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ResponsePacket) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ResponsePacket) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ResponsePacket) Error() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ResponsePacket) ContentsType() ResponsePacketContents {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ResponsePacketContents(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ResponsePacket) MutateContentsType(n ResponsePacketContents) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *ResponsePacket) Contents(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func ResponsePacketStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ResponsePacketAddError(builder *flatbuffers.Builder, error flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(error), 0)
}
func ResponsePacketAddContentsType(builder *flatbuffers.Builder, contentsType ResponsePacketContents) {
	builder.PrependByteSlot(1, byte(contentsType), 0)
}
func ResponsePacketAddContents(builder *flatbuffers.Builder, contents flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(contents), 0)
}
func ResponsePacketEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
