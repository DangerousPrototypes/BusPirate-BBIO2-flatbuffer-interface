// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package bpio

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DataRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsDataRequest(buf []byte, offset flatbuffers.UOffsetT) *DataRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DataRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishDataRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDataRequest(buf []byte, offset flatbuffers.UOffsetT) *DataRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DataRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDataRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DataRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DataRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DataRequest) StartMain() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *DataRequest) MutateStartMain(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *DataRequest) StartAlt() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *DataRequest) MutateStartAlt(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *DataRequest) DataWrite(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *DataRequest) DataWriteLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DataRequest) DataWriteBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DataRequest) MutateDataWrite(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *DataRequest) BytesRead() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DataRequest) MutateBytesRead(n uint16) bool {
	return rcv._tab.MutateUint16Slot(10, n)
}

func (rcv *DataRequest) StopMain() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *DataRequest) MutateStopMain(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *DataRequest) StopAlt() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *DataRequest) MutateStopAlt(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func DataRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func DataRequestAddStartMain(builder *flatbuffers.Builder, startMain bool) {
	builder.PrependBoolSlot(0, startMain, false)
}
func DataRequestAddStartAlt(builder *flatbuffers.Builder, startAlt bool) {
	builder.PrependBoolSlot(1, startAlt, false)
}
func DataRequestAddDataWrite(builder *flatbuffers.Builder, dataWrite flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(dataWrite), 0)
}
func DataRequestStartDataWriteVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func DataRequestAddBytesRead(builder *flatbuffers.Builder, bytesRead uint16) {
	builder.PrependUint16Slot(3, bytesRead, 0)
}
func DataRequestAddStopMain(builder *flatbuffers.Builder, stopMain bool) {
	builder.PrependBoolSlot(4, stopMain, false)
}
func DataRequestAddStopAlt(builder *flatbuffers.Builder, stopAlt bool) {
	builder.PrependBoolSlot(5, stopAlt, false)
}
func DataRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
