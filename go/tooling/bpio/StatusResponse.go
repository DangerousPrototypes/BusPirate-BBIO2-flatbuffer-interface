// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package bpio

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StatusResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsStatusResponse(buf []byte, offset flatbuffers.UOffsetT) *StatusResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StatusResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishStatusResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsStatusResponse(buf []byte, offset flatbuffers.UOffsetT) *StatusResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StatusResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedStatusResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *StatusResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StatusResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StatusResponse) Error() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *StatusResponse) VersionHardwareMajor() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatusResponse) MutateVersionHardwareMajor(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *StatusResponse) VersionHardwareMinor() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatusResponse) MutateVersionHardwareMinor(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *StatusResponse) VersionFirmwareMajor() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatusResponse) MutateVersionFirmwareMajor(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *StatusResponse) VersionFirmwareMinor() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatusResponse) MutateVersionFirmwareMinor(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func (rcv *StatusResponse) VersionFirmwareGitHash() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *StatusResponse) VersionFirmwareDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *StatusResponse) ModesAvailable(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *StatusResponse) ModesAvailableLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StatusResponse) ModeCurrent() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *StatusResponse) ModePinLabels(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *StatusResponse) ModePinLabelsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StatusResponse) ModeBitorderMsb() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *StatusResponse) MutateModeBitorderMsb(n bool) bool {
	return rcv._tab.MutateBoolSlot(24, n)
}

func (rcv *StatusResponse) ModeMaxPacketSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatusResponse) MutateModeMaxPacketSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(26, n)
}

func (rcv *StatusResponse) ModeMaxWrite() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatusResponse) MutateModeMaxWrite(n uint32) bool {
	return rcv._tab.MutateUint32Slot(28, n)
}

func (rcv *StatusResponse) ModeMaxRead() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatusResponse) MutateModeMaxRead(n uint32) bool {
	return rcv._tab.MutateUint32Slot(30, n)
}

func (rcv *StatusResponse) PsuEnabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *StatusResponse) MutatePsuEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(32, n)
}

func (rcv *StatusResponse) PsuSetMv() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatusResponse) MutatePsuSetMv(n uint32) bool {
	return rcv._tab.MutateUint32Slot(34, n)
}

func (rcv *StatusResponse) PsuSetMa() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatusResponse) MutatePsuSetMa(n uint32) bool {
	return rcv._tab.MutateUint32Slot(36, n)
}

func (rcv *StatusResponse) PsuMeasuredMv() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatusResponse) MutatePsuMeasuredMv(n uint32) bool {
	return rcv._tab.MutateUint32Slot(38, n)
}

func (rcv *StatusResponse) PsuMeasuredMa() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatusResponse) MutatePsuMeasuredMa(n uint32) bool {
	return rcv._tab.MutateUint32Slot(40, n)
}

func (rcv *StatusResponse) PsuCurrentError() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *StatusResponse) MutatePsuCurrentError(n bool) bool {
	return rcv._tab.MutateBoolSlot(42, n)
}

func (rcv *StatusResponse) PullupEnabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *StatusResponse) MutatePullupEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(44, n)
}

func (rcv *StatusResponse) AdcMv(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *StatusResponse) AdcMvLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StatusResponse) MutateAdcMv(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *StatusResponse) IoDirection() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatusResponse) MutateIoDirection(n byte) bool {
	return rcv._tab.MutateByteSlot(48, n)
}

func (rcv *StatusResponse) IoValue() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatusResponse) MutateIoValue(n byte) bool {
	return rcv._tab.MutateByteSlot(50, n)
}

func (rcv *StatusResponse) DiskSizeMb() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *StatusResponse) MutateDiskSizeMb(n float32) bool {
	return rcv._tab.MutateFloat32Slot(52, n)
}

func (rcv *StatusResponse) DiskUsedMb() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *StatusResponse) MutateDiskUsedMb(n float32) bool {
	return rcv._tab.MutateFloat32Slot(54, n)
}

func (rcv *StatusResponse) LedCount() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatusResponse) MutateLedCount(n byte) bool {
	return rcv._tab.MutateByteSlot(56, n)
}

func StatusResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(27)
}
func StatusResponseAddError(builder *flatbuffers.Builder, error flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(error), 0)
}
func StatusResponseAddVersionHardwareMajor(builder *flatbuffers.Builder, versionHardwareMajor byte) {
	builder.PrependByteSlot(1, versionHardwareMajor, 0)
}
func StatusResponseAddVersionHardwareMinor(builder *flatbuffers.Builder, versionHardwareMinor byte) {
	builder.PrependByteSlot(2, versionHardwareMinor, 0)
}
func StatusResponseAddVersionFirmwareMajor(builder *flatbuffers.Builder, versionFirmwareMajor byte) {
	builder.PrependByteSlot(3, versionFirmwareMajor, 0)
}
func StatusResponseAddVersionFirmwareMinor(builder *flatbuffers.Builder, versionFirmwareMinor byte) {
	builder.PrependByteSlot(4, versionFirmwareMinor, 0)
}
func StatusResponseAddVersionFirmwareGitHash(builder *flatbuffers.Builder, versionFirmwareGitHash flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(versionFirmwareGitHash), 0)
}
func StatusResponseAddVersionFirmwareDate(builder *flatbuffers.Builder, versionFirmwareDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(versionFirmwareDate), 0)
}
func StatusResponseAddModesAvailable(builder *flatbuffers.Builder, modesAvailable flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(modesAvailable), 0)
}
func StatusResponseStartModesAvailableVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StatusResponseAddModeCurrent(builder *flatbuffers.Builder, modeCurrent flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(modeCurrent), 0)
}
func StatusResponseAddModePinLabels(builder *flatbuffers.Builder, modePinLabels flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(modePinLabels), 0)
}
func StatusResponseStartModePinLabelsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StatusResponseAddModeBitorderMsb(builder *flatbuffers.Builder, modeBitorderMsb bool) {
	builder.PrependBoolSlot(10, modeBitorderMsb, false)
}
func StatusResponseAddModeMaxPacketSize(builder *flatbuffers.Builder, modeMaxPacketSize uint32) {
	builder.PrependUint32Slot(11, modeMaxPacketSize, 0)
}
func StatusResponseAddModeMaxWrite(builder *flatbuffers.Builder, modeMaxWrite uint32) {
	builder.PrependUint32Slot(12, modeMaxWrite, 0)
}
func StatusResponseAddModeMaxRead(builder *flatbuffers.Builder, modeMaxRead uint32) {
	builder.PrependUint32Slot(13, modeMaxRead, 0)
}
func StatusResponseAddPsuEnabled(builder *flatbuffers.Builder, psuEnabled bool) {
	builder.PrependBoolSlot(14, psuEnabled, false)
}
func StatusResponseAddPsuSetMv(builder *flatbuffers.Builder, psuSetMv uint32) {
	builder.PrependUint32Slot(15, psuSetMv, 0)
}
func StatusResponseAddPsuSetMa(builder *flatbuffers.Builder, psuSetMa uint32) {
	builder.PrependUint32Slot(16, psuSetMa, 0)
}
func StatusResponseAddPsuMeasuredMv(builder *flatbuffers.Builder, psuMeasuredMv uint32) {
	builder.PrependUint32Slot(17, psuMeasuredMv, 0)
}
func StatusResponseAddPsuMeasuredMa(builder *flatbuffers.Builder, psuMeasuredMa uint32) {
	builder.PrependUint32Slot(18, psuMeasuredMa, 0)
}
func StatusResponseAddPsuCurrentError(builder *flatbuffers.Builder, psuCurrentError bool) {
	builder.PrependBoolSlot(19, psuCurrentError, false)
}
func StatusResponseAddPullupEnabled(builder *flatbuffers.Builder, pullupEnabled bool) {
	builder.PrependBoolSlot(20, pullupEnabled, false)
}
func StatusResponseAddAdcMv(builder *flatbuffers.Builder, adcMv flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(adcMv), 0)
}
func StatusResponseStartAdcMvVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StatusResponseAddIoDirection(builder *flatbuffers.Builder, ioDirection byte) {
	builder.PrependByteSlot(22, ioDirection, 0)
}
func StatusResponseAddIoValue(builder *flatbuffers.Builder, ioValue byte) {
	builder.PrependByteSlot(23, ioValue, 0)
}
func StatusResponseAddDiskSizeMb(builder *flatbuffers.Builder, diskSizeMb float32) {
	builder.PrependFloat32Slot(24, diskSizeMb, 0.0)
}
func StatusResponseAddDiskUsedMb(builder *flatbuffers.Builder, diskUsedMb float32) {
	builder.PrependFloat32Slot(25, diskUsedMb, 0.0)
}
func StatusResponseAddLedCount(builder *flatbuffers.Builder, ledCount byte) {
	builder.PrependByteSlot(26, ledCount, 0)
}
func StatusResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
