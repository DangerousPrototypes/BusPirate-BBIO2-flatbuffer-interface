// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package bpio

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ModeConfiguration struct {
	_tab flatbuffers.Table
}

func GetRootAsModeConfiguration(buf []byte, offset flatbuffers.UOffsetT) *ModeConfiguration {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ModeConfiguration{}
	x.Init(buf, n+offset)
	return x
}

func FinishModeConfigurationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsModeConfiguration(buf []byte, offset flatbuffers.UOffsetT) *ModeConfiguration {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ModeConfiguration{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedModeConfigurationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ModeConfiguration) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ModeConfiguration) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ModeConfiguration) Speed() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 20000
}

func (rcv *ModeConfiguration) MutateSpeed(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *ModeConfiguration) DataBits() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 8
}

func (rcv *ModeConfiguration) MutateDataBits(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *ModeConfiguration) Parity() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ModeConfiguration) MutateParity(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *ModeConfiguration) StopBits() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *ModeConfiguration) MutateStopBits(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *ModeConfiguration) FlowControl() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ModeConfiguration) MutateFlowControl(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *ModeConfiguration) SignalInversion() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ModeConfiguration) MutateSignalInversion(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *ModeConfiguration) Submode() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ModeConfiguration) MutateSubmode(n byte) bool {
	return rcv._tab.MutateByteSlot(16, n)
}

func (rcv *ModeConfiguration) TxModulation() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ModeConfiguration) MutateTxModulation(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

func (rcv *ModeConfiguration) RxSensor() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ModeConfiguration) MutateRxSensor(n byte) bool {
	return rcv._tab.MutateByteSlot(20, n)
}

func ModeConfigurationStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func ModeConfigurationAddSpeed(builder *flatbuffers.Builder, speed uint32) {
	builder.PrependUint32Slot(0, speed, 20000)
}
func ModeConfigurationAddDataBits(builder *flatbuffers.Builder, dataBits byte) {
	builder.PrependByteSlot(1, dataBits, 8)
}
func ModeConfigurationAddParity(builder *flatbuffers.Builder, parity bool) {
	builder.PrependBoolSlot(2, parity, false)
}
func ModeConfigurationAddStopBits(builder *flatbuffers.Builder, stopBits byte) {
	builder.PrependByteSlot(3, stopBits, 1)
}
func ModeConfigurationAddFlowControl(builder *flatbuffers.Builder, flowControl bool) {
	builder.PrependBoolSlot(4, flowControl, false)
}
func ModeConfigurationAddSignalInversion(builder *flatbuffers.Builder, signalInversion bool) {
	builder.PrependBoolSlot(5, signalInversion, false)
}
func ModeConfigurationAddSubmode(builder *flatbuffers.Builder, submode byte) {
	builder.PrependByteSlot(6, submode, 0)
}
func ModeConfigurationAddTxModulation(builder *flatbuffers.Builder, txModulation uint32) {
	builder.PrependUint32Slot(7, txModulation, 0)
}
func ModeConfigurationAddRxSensor(builder *flatbuffers.Builder, rxSensor byte) {
	builder.PrependByteSlot(8, rxSensor, 0)
}
func ModeConfigurationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
