// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package bpio

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RequestPacket struct {
	_tab flatbuffers.Table
}

func GetRootAsRequestPacket(buf []byte, offset flatbuffers.UOffsetT) *RequestPacket {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RequestPacket{}
	x.Init(buf, n+offset)
	return x
}

func FinishRequestPacketBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsRequestPacket(buf []byte, offset flatbuffers.UOffsetT) *RequestPacket {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RequestPacket{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRequestPacketBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *RequestPacket) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RequestPacket) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RequestPacket) VersionMajor() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RequestPacket) MutateVersionMajor(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *RequestPacket) MinimumVersionMinor() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RequestPacket) MutateMinimumVersionMinor(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *RequestPacket) ContentsType() RequestPacketContents {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return RequestPacketContents(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *RequestPacket) MutateContentsType(n RequestPacketContents) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

func (rcv *RequestPacket) Contents(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func RequestPacketStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func RequestPacketAddVersionMajor(builder *flatbuffers.Builder, versionMajor byte) {
	builder.PrependByteSlot(0, versionMajor, 0)
}
func RequestPacketAddMinimumVersionMinor(builder *flatbuffers.Builder, minimumVersionMinor uint16) {
	builder.PrependUint16Slot(1, minimumVersionMinor, 0)
}
func RequestPacketAddContentsType(builder *flatbuffers.Builder, contentsType RequestPacketContents) {
	builder.PrependByteSlot(2, byte(contentsType), 0)
}
func RequestPacketAddContents(builder *flatbuffers.Builder, contents flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(contents), 0)
}
func RequestPacketEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
