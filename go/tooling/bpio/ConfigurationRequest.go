// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package bpio

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConfigurationRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsConfigurationRequest(buf []byte, offset flatbuffers.UOffsetT) *ConfigurationRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConfigurationRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishConfigurationRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsConfigurationRequest(buf []byte, offset flatbuffers.UOffsetT) *ConfigurationRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConfigurationRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedConfigurationRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ConfigurationRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConfigurationRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConfigurationRequest) Mode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConfigurationRequest) ModeConfiguration(obj *ModeConfiguration) *ModeConfiguration {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ModeConfiguration)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ConfigurationRequest) ModeBitorderMsb() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConfigurationRequest) MutateModeBitorderMsb(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *ConfigurationRequest) ModeBitorderLsb() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConfigurationRequest) MutateModeBitorderLsb(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *ConfigurationRequest) PsuDisable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConfigurationRequest) MutatePsuDisable(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *ConfigurationRequest) PsuEnable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConfigurationRequest) MutatePsuEnable(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *ConfigurationRequest) PsuSetMv() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConfigurationRequest) MutatePsuSetMv(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

func (rcv *ConfigurationRequest) PsuSetMa() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 300
}

func (rcv *ConfigurationRequest) MutatePsuSetMa(n uint16) bool {
	return rcv._tab.MutateUint16Slot(18, n)
}

func (rcv *ConfigurationRequest) PullupDisable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConfigurationRequest) MutatePullupDisable(n bool) bool {
	return rcv._tab.MutateBoolSlot(20, n)
}

func (rcv *ConfigurationRequest) PullupEnable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConfigurationRequest) MutatePullupEnable(n bool) bool {
	return rcv._tab.MutateBoolSlot(22, n)
}

func (rcv *ConfigurationRequest) IoDirectionMask() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConfigurationRequest) MutateIoDirectionMask(n byte) bool {
	return rcv._tab.MutateByteSlot(24, n)
}

func (rcv *ConfigurationRequest) IoDirection() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConfigurationRequest) MutateIoDirection(n byte) bool {
	return rcv._tab.MutateByteSlot(26, n)
}

func (rcv *ConfigurationRequest) IoValueMask() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConfigurationRequest) MutateIoValueMask(n byte) bool {
	return rcv._tab.MutateByteSlot(28, n)
}

func (rcv *ConfigurationRequest) IoValue() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConfigurationRequest) MutateIoValue(n byte) bool {
	return rcv._tab.MutateByteSlot(30, n)
}

func (rcv *ConfigurationRequest) LedResume() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConfigurationRequest) MutateLedResume(n bool) bool {
	return rcv._tab.MutateBoolSlot(32, n)
}

func (rcv *ConfigurationRequest) LedColor(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *ConfigurationRequest) LedColorLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConfigurationRequest) MutateLedColor(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *ConfigurationRequest) PrintString() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConfigurationRequest) HardwareBootloader() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConfigurationRequest) MutateHardwareBootloader(n bool) bool {
	return rcv._tab.MutateBoolSlot(38, n)
}

func (rcv *ConfigurationRequest) HardwareReset() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConfigurationRequest) MutateHardwareReset(n bool) bool {
	return rcv._tab.MutateBoolSlot(40, n)
}

func (rcv *ConfigurationRequest) HardwareSelftest() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConfigurationRequest) MutateHardwareSelftest(n bool) bool {
	return rcv._tab.MutateBoolSlot(42, n)
}

func ConfigurationRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(20)
}
func ConfigurationRequestAddMode(builder *flatbuffers.Builder, mode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(mode), 0)
}
func ConfigurationRequestAddModeConfiguration(builder *flatbuffers.Builder, modeConfiguration flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(modeConfiguration), 0)
}
func ConfigurationRequestAddModeBitorderMsb(builder *flatbuffers.Builder, modeBitorderMsb bool) {
	builder.PrependBoolSlot(2, modeBitorderMsb, false)
}
func ConfigurationRequestAddModeBitorderLsb(builder *flatbuffers.Builder, modeBitorderLsb bool) {
	builder.PrependBoolSlot(3, modeBitorderLsb, false)
}
func ConfigurationRequestAddPsuDisable(builder *flatbuffers.Builder, psuDisable bool) {
	builder.PrependBoolSlot(4, psuDisable, false)
}
func ConfigurationRequestAddPsuEnable(builder *flatbuffers.Builder, psuEnable bool) {
	builder.PrependBoolSlot(5, psuEnable, false)
}
func ConfigurationRequestAddPsuSetMv(builder *flatbuffers.Builder, psuSetMv uint32) {
	builder.PrependUint32Slot(6, psuSetMv, 0)
}
func ConfigurationRequestAddPsuSetMa(builder *flatbuffers.Builder, psuSetMa uint16) {
	builder.PrependUint16Slot(7, psuSetMa, 300)
}
func ConfigurationRequestAddPullupDisable(builder *flatbuffers.Builder, pullupDisable bool) {
	builder.PrependBoolSlot(8, pullupDisable, false)
}
func ConfigurationRequestAddPullupEnable(builder *flatbuffers.Builder, pullupEnable bool) {
	builder.PrependBoolSlot(9, pullupEnable, false)
}
func ConfigurationRequestAddIoDirectionMask(builder *flatbuffers.Builder, ioDirectionMask byte) {
	builder.PrependByteSlot(10, ioDirectionMask, 0)
}
func ConfigurationRequestAddIoDirection(builder *flatbuffers.Builder, ioDirection byte) {
	builder.PrependByteSlot(11, ioDirection, 0)
}
func ConfigurationRequestAddIoValueMask(builder *flatbuffers.Builder, ioValueMask byte) {
	builder.PrependByteSlot(12, ioValueMask, 0)
}
func ConfigurationRequestAddIoValue(builder *flatbuffers.Builder, ioValue byte) {
	builder.PrependByteSlot(13, ioValue, 0)
}
func ConfigurationRequestAddLedResume(builder *flatbuffers.Builder, ledResume bool) {
	builder.PrependBoolSlot(14, ledResume, false)
}
func ConfigurationRequestAddLedColor(builder *flatbuffers.Builder, ledColor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(ledColor), 0)
}
func ConfigurationRequestStartLedColorVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConfigurationRequestAddPrintString(builder *flatbuffers.Builder, printString flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(printString), 0)
}
func ConfigurationRequestAddHardwareBootloader(builder *flatbuffers.Builder, hardwareBootloader bool) {
	builder.PrependBoolSlot(17, hardwareBootloader, false)
}
func ConfigurationRequestAddHardwareReset(builder *flatbuffers.Builder, hardwareReset bool) {
	builder.PrependBoolSlot(18, hardwareReset, false)
}
func ConfigurationRequestAddHardwareSelftest(builder *flatbuffers.Builder, hardwareSelftest bool) {
	builder.PrependBoolSlot(19, hardwareSelftest, false)
}
func ConfigurationRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
