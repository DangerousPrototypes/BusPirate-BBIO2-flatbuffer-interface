// automatically generated by the FlatBuffers compiler, do not modify

package bpio;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class ModeConfiguration extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static ModeConfiguration getRootAsModeConfiguration(ByteBuffer _bb) { return getRootAsModeConfiguration(_bb, new ModeConfiguration()); }
  public static ModeConfiguration getRootAsModeConfiguration(ByteBuffer _bb, ModeConfiguration obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ModeConfiguration __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long speed() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 20000L; }
  public int dataBits() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 8; }
  public boolean parity() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int stopBits() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 1; }
  public boolean flowControl() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean signalInversion() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean clockStretch() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean clockPolarity() { int o = __offset(18); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean clockPhase() { int o = __offset(20); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean chipSelectIdle() { int o = __offset(22); return o != 0 ? 0!=bb.get(o + bb_pos) : true; }
  public int submode() { int o = __offset(24); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public long txModulation() { int o = __offset(26); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public int rxSensor() { int o = __offset(28); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }

  public static int createModeConfiguration(FlatBufferBuilder builder,
      long speed,
      int dataBits,
      boolean parity,
      int stopBits,
      boolean flowControl,
      boolean signalInversion,
      boolean clockStretch,
      boolean clockPolarity,
      boolean clockPhase,
      boolean chipSelectIdle,
      int submode,
      long txModulation,
      int rxSensor) {
    builder.startTable(13);
    ModeConfiguration.addTxModulation(builder, txModulation);
    ModeConfiguration.addSpeed(builder, speed);
    ModeConfiguration.addRxSensor(builder, rxSensor);
    ModeConfiguration.addSubmode(builder, submode);
    ModeConfiguration.addChipSelectIdle(builder, chipSelectIdle);
    ModeConfiguration.addClockPhase(builder, clockPhase);
    ModeConfiguration.addClockPolarity(builder, clockPolarity);
    ModeConfiguration.addClockStretch(builder, clockStretch);
    ModeConfiguration.addSignalInversion(builder, signalInversion);
    ModeConfiguration.addFlowControl(builder, flowControl);
    ModeConfiguration.addStopBits(builder, stopBits);
    ModeConfiguration.addParity(builder, parity);
    ModeConfiguration.addDataBits(builder, dataBits);
    return ModeConfiguration.endModeConfiguration(builder);
  }

  public static void startModeConfiguration(FlatBufferBuilder builder) { builder.startTable(13); }
  public static void addSpeed(FlatBufferBuilder builder, long speed) { builder.addInt(0, (int) speed, (int) 20000L); }
  public static void addDataBits(FlatBufferBuilder builder, int dataBits) { builder.addByte(1, (byte) dataBits, (byte) 8); }
  public static void addParity(FlatBufferBuilder builder, boolean parity) { builder.addBoolean(2, parity, false); }
  public static void addStopBits(FlatBufferBuilder builder, int stopBits) { builder.addByte(3, (byte) stopBits, (byte) 1); }
  public static void addFlowControl(FlatBufferBuilder builder, boolean flowControl) { builder.addBoolean(4, flowControl, false); }
  public static void addSignalInversion(FlatBufferBuilder builder, boolean signalInversion) { builder.addBoolean(5, signalInversion, false); }
  public static void addClockStretch(FlatBufferBuilder builder, boolean clockStretch) { builder.addBoolean(6, clockStretch, false); }
  public static void addClockPolarity(FlatBufferBuilder builder, boolean clockPolarity) { builder.addBoolean(7, clockPolarity, false); }
  public static void addClockPhase(FlatBufferBuilder builder, boolean clockPhase) { builder.addBoolean(8, clockPhase, false); }
  public static void addChipSelectIdle(FlatBufferBuilder builder, boolean chipSelectIdle) { builder.addBoolean(9, chipSelectIdle, true); }
  public static void addSubmode(FlatBufferBuilder builder, int submode) { builder.addByte(10, (byte) submode, (byte) 0); }
  public static void addTxModulation(FlatBufferBuilder builder, long txModulation) { builder.addInt(11, (int) txModulation, (int) 0L); }
  public static void addRxSensor(FlatBufferBuilder builder, int rxSensor) { builder.addByte(12, (byte) rxSensor, (byte) 0); }
  public static int endModeConfiguration(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ModeConfiguration get(int j) { return get(new ModeConfiguration(), j); }
    public ModeConfiguration get(ModeConfiguration obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

