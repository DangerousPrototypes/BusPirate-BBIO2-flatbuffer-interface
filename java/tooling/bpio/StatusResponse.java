// automatically generated by the FlatBuffers compiler, do not modify

package bpio;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class StatusResponse extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static StatusResponse getRootAsStatusResponse(ByteBuffer _bb) { return getRootAsStatusResponse(_bb, new StatusResponse()); }
  public static StatusResponse getRootAsStatusResponse(ByteBuffer _bb, StatusResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public StatusResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String error() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer errorAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer errorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public int hardwareVersionMajor() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int hardwareVersionMinor() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int firmwareVersionMajor() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int firmwareVersionMinor() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public String firmwareGitHash() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer firmwareGitHashAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer firmwareGitHashInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  public String firmwareDate() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer firmwareDateAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer firmwareDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  public String modesAvailable(int j) { int o = __offset(18); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int modesAvailableLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public StringVector modesAvailableVector() { return modesAvailableVector(new StringVector()); }
  public StringVector modesAvailableVector(StringVector obj) { int o = __offset(18); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public String modeCurrent() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer modeCurrentAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer modeCurrentInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  public String modePinLabels(int j) { int o = __offset(22); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int modePinLabelsLength() { int o = __offset(22); return o != 0 ? __vector_len(o) : 0; }
  public StringVector modePinLabelsVector() { return modePinLabelsVector(new StringVector()); }
  public StringVector modePinLabelsVector(StringVector obj) { int o = __offset(22); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public boolean modeBitorderMsb() { int o = __offset(24); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean psuEnabled() { int o = __offset(26); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public long psuSetMv() { int o = __offset(28); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long psuSetMa() { int o = __offset(30); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long psuMeasuredMv() { int o = __offset(32); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long psuMeasuredMa() { int o = __offset(34); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public boolean psuCurrentError() { int o = __offset(36); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean pullupEnabled() { int o = __offset(38); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public long pullxConfig() { int o = __offset(40); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long adcMv(int j) { int o = __offset(42); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int adcMvLength() { int o = __offset(42); return o != 0 ? __vector_len(o) : 0; }
  public IntVector adcMvVector() { return adcMvVector(new IntVector()); }
  public IntVector adcMvVector(IntVector obj) { int o = __offset(42); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer adcMvAsByteBuffer() { return __vector_as_bytebuffer(42, 4); }
  public ByteBuffer adcMvInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 4); }
  public int ioDirection() { int o = __offset(44); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int ioValue() { int o = __offset(46); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public float diskSizeMb() { int o = __offset(48); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float diskUsedMb() { int o = __offset(50); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public int ledCount() { int o = __offset(52); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }

  public static int createStatusResponse(FlatBufferBuilder builder,
      int errorOffset,
      int hardwareVersionMajor,
      int hardwareVersionMinor,
      int firmwareVersionMajor,
      int firmwareVersionMinor,
      int firmwareGitHashOffset,
      int firmwareDateOffset,
      int modesAvailableOffset,
      int modeCurrentOffset,
      int modePinLabelsOffset,
      boolean modeBitorderMsb,
      boolean psuEnabled,
      long psuSetMv,
      long psuSetMa,
      long psuMeasuredMv,
      long psuMeasuredMa,
      boolean psuCurrentError,
      boolean pullupEnabled,
      long pullxConfig,
      int adcMvOffset,
      int ioDirection,
      int ioValue,
      float diskSizeMb,
      float diskUsedMb,
      int ledCount) {
    builder.startTable(25);
    StatusResponse.addDiskUsedMb(builder, diskUsedMb);
    StatusResponse.addDiskSizeMb(builder, diskSizeMb);
    StatusResponse.addAdcMv(builder, adcMvOffset);
    StatusResponse.addPullxConfig(builder, pullxConfig);
    StatusResponse.addPsuMeasuredMa(builder, psuMeasuredMa);
    StatusResponse.addPsuMeasuredMv(builder, psuMeasuredMv);
    StatusResponse.addPsuSetMa(builder, psuSetMa);
    StatusResponse.addPsuSetMv(builder, psuSetMv);
    StatusResponse.addModePinLabels(builder, modePinLabelsOffset);
    StatusResponse.addModeCurrent(builder, modeCurrentOffset);
    StatusResponse.addModesAvailable(builder, modesAvailableOffset);
    StatusResponse.addFirmwareDate(builder, firmwareDateOffset);
    StatusResponse.addFirmwareGitHash(builder, firmwareGitHashOffset);
    StatusResponse.addError(builder, errorOffset);
    StatusResponse.addLedCount(builder, ledCount);
    StatusResponse.addIoValue(builder, ioValue);
    StatusResponse.addIoDirection(builder, ioDirection);
    StatusResponse.addPullupEnabled(builder, pullupEnabled);
    StatusResponse.addPsuCurrentError(builder, psuCurrentError);
    StatusResponse.addPsuEnabled(builder, psuEnabled);
    StatusResponse.addModeBitorderMsb(builder, modeBitorderMsb);
    StatusResponse.addFirmwareVersionMinor(builder, firmwareVersionMinor);
    StatusResponse.addFirmwareVersionMajor(builder, firmwareVersionMajor);
    StatusResponse.addHardwareVersionMinor(builder, hardwareVersionMinor);
    StatusResponse.addHardwareVersionMajor(builder, hardwareVersionMajor);
    return StatusResponse.endStatusResponse(builder);
  }

  public static void startStatusResponse(FlatBufferBuilder builder) { builder.startTable(25); }
  public static void addError(FlatBufferBuilder builder, int errorOffset) { builder.addOffset(0, errorOffset, 0); }
  public static void addHardwareVersionMajor(FlatBufferBuilder builder, int hardwareVersionMajor) { builder.addByte(1, (byte) hardwareVersionMajor, (byte) 0); }
  public static void addHardwareVersionMinor(FlatBufferBuilder builder, int hardwareVersionMinor) { builder.addByte(2, (byte) hardwareVersionMinor, (byte) 0); }
  public static void addFirmwareVersionMajor(FlatBufferBuilder builder, int firmwareVersionMajor) { builder.addByte(3, (byte) firmwareVersionMajor, (byte) 0); }
  public static void addFirmwareVersionMinor(FlatBufferBuilder builder, int firmwareVersionMinor) { builder.addByte(4, (byte) firmwareVersionMinor, (byte) 0); }
  public static void addFirmwareGitHash(FlatBufferBuilder builder, int firmwareGitHashOffset) { builder.addOffset(5, firmwareGitHashOffset, 0); }
  public static void addFirmwareDate(FlatBufferBuilder builder, int firmwareDateOffset) { builder.addOffset(6, firmwareDateOffset, 0); }
  public static void addModesAvailable(FlatBufferBuilder builder, int modesAvailableOffset) { builder.addOffset(7, modesAvailableOffset, 0); }
  public static int createModesAvailableVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startModesAvailableVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addModeCurrent(FlatBufferBuilder builder, int modeCurrentOffset) { builder.addOffset(8, modeCurrentOffset, 0); }
  public static void addModePinLabels(FlatBufferBuilder builder, int modePinLabelsOffset) { builder.addOffset(9, modePinLabelsOffset, 0); }
  public static int createModePinLabelsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startModePinLabelsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addModeBitorderMsb(FlatBufferBuilder builder, boolean modeBitorderMsb) { builder.addBoolean(10, modeBitorderMsb, false); }
  public static void addPsuEnabled(FlatBufferBuilder builder, boolean psuEnabled) { builder.addBoolean(11, psuEnabled, false); }
  public static void addPsuSetMv(FlatBufferBuilder builder, long psuSetMv) { builder.addInt(12, (int) psuSetMv, (int) 0L); }
  public static void addPsuSetMa(FlatBufferBuilder builder, long psuSetMa) { builder.addInt(13, (int) psuSetMa, (int) 0L); }
  public static void addPsuMeasuredMv(FlatBufferBuilder builder, long psuMeasuredMv) { builder.addInt(14, (int) psuMeasuredMv, (int) 0L); }
  public static void addPsuMeasuredMa(FlatBufferBuilder builder, long psuMeasuredMa) { builder.addInt(15, (int) psuMeasuredMa, (int) 0L); }
  public static void addPsuCurrentError(FlatBufferBuilder builder, boolean psuCurrentError) { builder.addBoolean(16, psuCurrentError, false); }
  public static void addPullupEnabled(FlatBufferBuilder builder, boolean pullupEnabled) { builder.addBoolean(17, pullupEnabled, false); }
  public static void addPullxConfig(FlatBufferBuilder builder, long pullxConfig) { builder.addInt(18, (int) pullxConfig, (int) 0L); }
  public static void addAdcMv(FlatBufferBuilder builder, int adcMvOffset) { builder.addOffset(19, adcMvOffset, 0); }
  public static int createAdcMvVector(FlatBufferBuilder builder, long[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt((int) data[i]); return builder.endVector(); }
  public static void startAdcMvVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addIoDirection(FlatBufferBuilder builder, int ioDirection) { builder.addByte(20, (byte) ioDirection, (byte) 0); }
  public static void addIoValue(FlatBufferBuilder builder, int ioValue) { builder.addByte(21, (byte) ioValue, (byte) 0); }
  public static void addDiskSizeMb(FlatBufferBuilder builder, float diskSizeMb) { builder.addFloat(22, diskSizeMb, 0.0f); }
  public static void addDiskUsedMb(FlatBufferBuilder builder, float diskUsedMb) { builder.addFloat(23, diskUsedMb, 0.0f); }
  public static void addLedCount(FlatBufferBuilder builder, int ledCount) { builder.addByte(24, (byte) ledCount, (byte) 0); }
  public static int endStatusResponse(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public StatusResponse get(int j) { return get(new StatusResponse(), j); }
    public StatusResponse get(StatusResponse obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

