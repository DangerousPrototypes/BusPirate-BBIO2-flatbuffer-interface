// automatically generated by the FlatBuffers compiler, do not modify

package bpio;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class RequestPacket extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static RequestPacket getRootAsRequestPacket(ByteBuffer _bb) { return getRootAsRequestPacket(_bb, new RequestPacket()); }
  public static RequestPacket getRootAsRequestPacket(ByteBuffer _bb, RequestPacket obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public RequestPacket __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int versionMajor() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int minimumVersionMinor() { int o = __offset(6); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public byte contentsType() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table contents(Table obj) { int o = __offset(10); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static int createRequestPacket(FlatBufferBuilder builder,
      int versionMajor,
      int minimumVersionMinor,
      byte contentsType,
      int contentsOffset) {
    builder.startTable(4);
    RequestPacket.addContents(builder, contentsOffset);
    RequestPacket.addMinimumVersionMinor(builder, minimumVersionMinor);
    RequestPacket.addContentsType(builder, contentsType);
    RequestPacket.addVersionMajor(builder, versionMajor);
    return RequestPacket.endRequestPacket(builder);
  }

  public static void startRequestPacket(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addVersionMajor(FlatBufferBuilder builder, int versionMajor) { builder.addByte(0, (byte) versionMajor, (byte) 0); }
  public static void addMinimumVersionMinor(FlatBufferBuilder builder, int minimumVersionMinor) { builder.addShort(1, (short) minimumVersionMinor, (short) 0); }
  public static void addContentsType(FlatBufferBuilder builder, byte contentsType) { builder.addByte(2, contentsType, 0); }
  public static void addContents(FlatBufferBuilder builder, int contentsOffset) { builder.addOffset(3, contentsOffset, 0); }
  public static int endRequestPacket(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public RequestPacket get(int j) { return get(new RequestPacket(), j); }
    public RequestPacket get(RequestPacket obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

