// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { RequestPacketContents, unionToRequestPacketContents, unionListToRequestPacketContents } from '../bpio/request-packet-contents.js';


export class RequestPacket {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RequestPacket {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRequestPacket(bb:flatbuffers.ByteBuffer, obj?:RequestPacket):RequestPacket {
  return (obj || new RequestPacket()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRequestPacket(bb:flatbuffers.ByteBuffer, obj?:RequestPacket):RequestPacket {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RequestPacket()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

versionMajor():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

minimumVersionMinor():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

contentsType():RequestPacketContents {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : RequestPacketContents.NONE;
}

contents<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startRequestPacket(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addVersionMajor(builder:flatbuffers.Builder, versionMajor:number) {
  builder.addFieldInt8(0, versionMajor, 0);
}

static addMinimumVersionMinor(builder:flatbuffers.Builder, minimumVersionMinor:number) {
  builder.addFieldInt16(1, minimumVersionMinor, 0);
}

static addContentsType(builder:flatbuffers.Builder, contentsType:RequestPacketContents) {
  builder.addFieldInt8(2, contentsType, RequestPacketContents.NONE);
}

static addContents(builder:flatbuffers.Builder, contentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, contentsOffset, 0);
}

static endRequestPacket(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRequestPacket(builder:flatbuffers.Builder, versionMajor:number, minimumVersionMinor:number, contentsType:RequestPacketContents, contentsOffset:flatbuffers.Offset):flatbuffers.Offset {
  RequestPacket.startRequestPacket(builder);
  RequestPacket.addVersionMajor(builder, versionMajor);
  RequestPacket.addMinimumVersionMinor(builder, minimumVersionMinor);
  RequestPacket.addContentsType(builder, contentsType);
  RequestPacket.addContents(builder, contentsOffset);
  return RequestPacket.endRequestPacket(builder);
}
}
