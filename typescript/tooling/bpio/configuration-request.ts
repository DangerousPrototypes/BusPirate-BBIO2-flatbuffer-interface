// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ModeConfiguration } from '../bpio/mode-configuration.js';


export class ConfigurationRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ConfigurationRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConfigurationRequest(bb:flatbuffers.ByteBuffer, obj?:ConfigurationRequest):ConfigurationRequest {
  return (obj || new ConfigurationRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConfigurationRequest(bb:flatbuffers.ByteBuffer, obj?:ConfigurationRequest):ConfigurationRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ConfigurationRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

mode():string|null
mode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modeConfiguration(obj?:ModeConfiguration):ModeConfiguration|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ModeConfiguration()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

modeBitorderMsb():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

modeBitorderLsb():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

psuDisable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

psuEnable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

psuSetMv():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

psuSetMa():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 300;
}

pullupDisable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

pullupEnable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

ioDirectionMask():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

ioDirection():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

ioValueMask():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

ioValue():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

ledResume():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

ledColor(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

ledColorLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

ledColorArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

printString():string|null
printString(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
printString(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hardwareBootloader():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

hardwareReset():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

hardwareSelftest():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startConfigurationRequest(builder:flatbuffers.Builder) {
  builder.startObject(20);
}

static addMode(builder:flatbuffers.Builder, modeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, modeOffset, 0);
}

static addModeConfiguration(builder:flatbuffers.Builder, modeConfigurationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, modeConfigurationOffset, 0);
}

static addModeBitorderMsb(builder:flatbuffers.Builder, modeBitorderMsb:boolean) {
  builder.addFieldInt8(2, +modeBitorderMsb, +false);
}

static addModeBitorderLsb(builder:flatbuffers.Builder, modeBitorderLsb:boolean) {
  builder.addFieldInt8(3, +modeBitorderLsb, +false);
}

static addPsuDisable(builder:flatbuffers.Builder, psuDisable:boolean) {
  builder.addFieldInt8(4, +psuDisable, +false);
}

static addPsuEnable(builder:flatbuffers.Builder, psuEnable:boolean) {
  builder.addFieldInt8(5, +psuEnable, +false);
}

static addPsuSetMv(builder:flatbuffers.Builder, psuSetMv:number) {
  builder.addFieldInt32(6, psuSetMv, 0);
}

static addPsuSetMa(builder:flatbuffers.Builder, psuSetMa:number) {
  builder.addFieldInt16(7, psuSetMa, 300);
}

static addPullupDisable(builder:flatbuffers.Builder, pullupDisable:boolean) {
  builder.addFieldInt8(8, +pullupDisable, +false);
}

static addPullupEnable(builder:flatbuffers.Builder, pullupEnable:boolean) {
  builder.addFieldInt8(9, +pullupEnable, +false);
}

static addIoDirectionMask(builder:flatbuffers.Builder, ioDirectionMask:number) {
  builder.addFieldInt8(10, ioDirectionMask, 0);
}

static addIoDirection(builder:flatbuffers.Builder, ioDirection:number) {
  builder.addFieldInt8(11, ioDirection, 0);
}

static addIoValueMask(builder:flatbuffers.Builder, ioValueMask:number) {
  builder.addFieldInt8(12, ioValueMask, 0);
}

static addIoValue(builder:flatbuffers.Builder, ioValue:number) {
  builder.addFieldInt8(13, ioValue, 0);
}

static addLedResume(builder:flatbuffers.Builder, ledResume:boolean) {
  builder.addFieldInt8(14, +ledResume, +false);
}

static addLedColor(builder:flatbuffers.Builder, ledColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, ledColorOffset, 0);
}

static createLedColorVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createLedColorVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createLedColorVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startLedColorVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPrintString(builder:flatbuffers.Builder, printStringOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, printStringOffset, 0);
}

static addHardwareBootloader(builder:flatbuffers.Builder, hardwareBootloader:boolean) {
  builder.addFieldInt8(17, +hardwareBootloader, +false);
}

static addHardwareReset(builder:flatbuffers.Builder, hardwareReset:boolean) {
  builder.addFieldInt8(18, +hardwareReset, +false);
}

static addHardwareSelftest(builder:flatbuffers.Builder, hardwareSelftest:boolean) {
  builder.addFieldInt8(19, +hardwareSelftest, +false);
}

static endConfigurationRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
