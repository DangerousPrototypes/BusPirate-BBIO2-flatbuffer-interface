// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class DataRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DataRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDataRequest(bb:flatbuffers.ByteBuffer, obj?:DataRequest):DataRequest {
  return (obj || new DataRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDataRequest(bb:flatbuffers.ByteBuffer, obj?:DataRequest):DataRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DataRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

startMain():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

startAlt():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

dataWrite(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

dataWriteLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dataWriteArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

bytesRead():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

stopMain():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

stopAlt():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startDataRequest(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addStartMain(builder:flatbuffers.Builder, startMain:boolean) {
  builder.addFieldInt8(0, +startMain, +false);
}

static addStartAlt(builder:flatbuffers.Builder, startAlt:boolean) {
  builder.addFieldInt8(1, +startAlt, +false);
}

static addDataWrite(builder:flatbuffers.Builder, dataWriteOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, dataWriteOffset, 0);
}

static createDataWriteVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startDataWriteVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addBytesRead(builder:flatbuffers.Builder, bytesRead:number) {
  builder.addFieldInt16(3, bytesRead, 0);
}

static addStopMain(builder:flatbuffers.Builder, stopMain:boolean) {
  builder.addFieldInt8(4, +stopMain, +false);
}

static addStopAlt(builder:flatbuffers.Builder, stopAlt:boolean) {
  builder.addFieldInt8(5, +stopAlt, +false);
}

static endDataRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDataRequest(builder:flatbuffers.Builder, startMain:boolean, startAlt:boolean, dataWriteOffset:flatbuffers.Offset, bytesRead:number, stopMain:boolean, stopAlt:boolean):flatbuffers.Offset {
  DataRequest.startDataRequest(builder);
  DataRequest.addStartMain(builder, startMain);
  DataRequest.addStartAlt(builder, startAlt);
  DataRequest.addDataWrite(builder, dataWriteOffset);
  DataRequest.addBytesRead(builder, bytesRead);
  DataRequest.addStopMain(builder, stopMain);
  DataRequest.addStopAlt(builder, stopAlt);
  return DataRequest.endDataRequest(builder);
}
}
