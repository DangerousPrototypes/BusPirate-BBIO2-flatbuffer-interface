// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace bpio
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ErrorResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ErrorResponse GetRootAsErrorResponse(ByteBuffer _bb) { return GetRootAsErrorResponse(_bb, new ErrorResponse()); }
  public static ErrorResponse GetRootAsErrorResponse(ByteBuffer _bb, ErrorResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ErrorResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Error { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetErrorBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetErrorBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetErrorArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<bpio.ErrorResponse> CreateErrorResponse(FlatBufferBuilder builder,
      StringOffset errorOffset = default(StringOffset)) {
    builder.StartTable(1);
    ErrorResponse.AddError(builder, errorOffset);
    return ErrorResponse.EndErrorResponse(builder);
  }

  public static void StartErrorResponse(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddError(FlatBufferBuilder builder, StringOffset errorOffset) { builder.AddOffset(0, errorOffset.Value, 0); }
  public static Offset<bpio.ErrorResponse> EndErrorResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<bpio.ErrorResponse>(o);
  }
}


static public class ErrorResponseVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Error*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
