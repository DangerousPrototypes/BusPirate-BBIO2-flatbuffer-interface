// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace bpio
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DataRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DataRequest GetRootAsDataRequest(ByteBuffer _bb) { return GetRootAsDataRequest(_bb, new DataRequest()); }
  public static DataRequest GetRootAsDataRequest(ByteBuffer _bb, DataRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DataRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool StartMain { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool StartAlt { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public byte DataWrite(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DataWriteLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataWriteBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDataWriteBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDataWriteArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<bpio.DataRequest> CreateDataRequest(FlatBufferBuilder builder,
      bool start_main = false,
      bool start_alt = false,
      VectorOffset data_writeOffset = default(VectorOffset)) {
    builder.StartTable(3);
    DataRequest.AddDataWrite(builder, data_writeOffset);
    DataRequest.AddStartAlt(builder, start_alt);
    DataRequest.AddStartMain(builder, start_main);
    return DataRequest.EndDataRequest(builder);
  }

  public static void StartDataRequest(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddStartMain(FlatBufferBuilder builder, bool startMain) { builder.AddBool(0, startMain, false); }
  public static void AddStartAlt(FlatBufferBuilder builder, bool startAlt) { builder.AddBool(1, startAlt, false); }
  public static void AddDataWrite(FlatBufferBuilder builder, VectorOffset dataWriteOffset) { builder.AddOffset(2, dataWriteOffset.Value, 0); }
  public static VectorOffset CreateDataWriteVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataWriteVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataWriteVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataWriteVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataWriteVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<bpio.DataRequest> EndDataRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<bpio.DataRequest>(o);
  }
}


static public class DataRequestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*StartMain*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 6 /*StartAlt*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*DataWrite*/, 1 /*byte*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
