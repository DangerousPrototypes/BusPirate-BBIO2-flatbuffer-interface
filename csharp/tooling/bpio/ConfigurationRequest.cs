// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace bpio
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ConfigurationRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ConfigurationRequest GetRootAsConfigurationRequest(ByteBuffer _bb) { return GetRootAsConfigurationRequest(_bb, new ConfigurationRequest()); }
  public static ConfigurationRequest GetRootAsConfigurationRequest(ByteBuffer _bb, ConfigurationRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConfigurationRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Mode { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetModeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetModeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetModeArray() { return __p.__vector_as_array<byte>(4); }
  public bpio.ModeConfiguration? ModeConfiguration { get { int o = __p.__offset(6); return o != 0 ? (bpio.ModeConfiguration?)(new bpio.ModeConfiguration()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool ModeBitorderMsb { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ModeBitorderLsb { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool PsuDisable { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool PsuEnable { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public uint PsuSetMv { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ushort PsuSetMa { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)300; } }
  public bool PullupDisable { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool PullupEnable { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public byte IoDirectionMask { get { int o = __p.__offset(24); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte IoDirection { get { int o = __p.__offset(26); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte IoValueMask { get { int o = __p.__offset(28); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte IoValue { get { int o = __p.__offset(30); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<bpio.ConfigurationRequest> CreateConfigurationRequest(FlatBufferBuilder builder,
      StringOffset modeOffset = default(StringOffset),
      Offset<bpio.ModeConfiguration> mode_configurationOffset = default(Offset<bpio.ModeConfiguration>),
      bool mode_bitorder_msb = false,
      bool mode_bitorder_lsb = false,
      bool psu_disable = false,
      bool psu_enable = false,
      uint psu_set_mv = 0,
      ushort psu_set_ma = 300,
      bool pullup_disable = false,
      bool pullup_enable = false,
      byte io_direction_mask = 0,
      byte io_direction = 0,
      byte io_value_mask = 0,
      byte io_value = 0) {
    builder.StartTable(14);
    ConfigurationRequest.AddPsuSetMv(builder, psu_set_mv);
    ConfigurationRequest.AddModeConfiguration(builder, mode_configurationOffset);
    ConfigurationRequest.AddMode(builder, modeOffset);
    ConfigurationRequest.AddPsuSetMa(builder, psu_set_ma);
    ConfigurationRequest.AddIoValue(builder, io_value);
    ConfigurationRequest.AddIoValueMask(builder, io_value_mask);
    ConfigurationRequest.AddIoDirection(builder, io_direction);
    ConfigurationRequest.AddIoDirectionMask(builder, io_direction_mask);
    ConfigurationRequest.AddPullupEnable(builder, pullup_enable);
    ConfigurationRequest.AddPullupDisable(builder, pullup_disable);
    ConfigurationRequest.AddPsuEnable(builder, psu_enable);
    ConfigurationRequest.AddPsuDisable(builder, psu_disable);
    ConfigurationRequest.AddModeBitorderLsb(builder, mode_bitorder_lsb);
    ConfigurationRequest.AddModeBitorderMsb(builder, mode_bitorder_msb);
    return ConfigurationRequest.EndConfigurationRequest(builder);
  }

  public static void StartConfigurationRequest(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddMode(FlatBufferBuilder builder, StringOffset modeOffset) { builder.AddOffset(0, modeOffset.Value, 0); }
  public static void AddModeConfiguration(FlatBufferBuilder builder, Offset<bpio.ModeConfiguration> modeConfigurationOffset) { builder.AddOffset(1, modeConfigurationOffset.Value, 0); }
  public static void AddModeBitorderMsb(FlatBufferBuilder builder, bool modeBitorderMsb) { builder.AddBool(2, modeBitorderMsb, false); }
  public static void AddModeBitorderLsb(FlatBufferBuilder builder, bool modeBitorderLsb) { builder.AddBool(3, modeBitorderLsb, false); }
  public static void AddPsuDisable(FlatBufferBuilder builder, bool psuDisable) { builder.AddBool(4, psuDisable, false); }
  public static void AddPsuEnable(FlatBufferBuilder builder, bool psuEnable) { builder.AddBool(5, psuEnable, false); }
  public static void AddPsuSetMv(FlatBufferBuilder builder, uint psuSetMv) { builder.AddUint(6, psuSetMv, 0); }
  public static void AddPsuSetMa(FlatBufferBuilder builder, ushort psuSetMa) { builder.AddUshort(7, psuSetMa, 300); }
  public static void AddPullupDisable(FlatBufferBuilder builder, bool pullupDisable) { builder.AddBool(8, pullupDisable, false); }
  public static void AddPullupEnable(FlatBufferBuilder builder, bool pullupEnable) { builder.AddBool(9, pullupEnable, false); }
  public static void AddIoDirectionMask(FlatBufferBuilder builder, byte ioDirectionMask) { builder.AddByte(10, ioDirectionMask, 0); }
  public static void AddIoDirection(FlatBufferBuilder builder, byte ioDirection) { builder.AddByte(11, ioDirection, 0); }
  public static void AddIoValueMask(FlatBufferBuilder builder, byte ioValueMask) { builder.AddByte(12, ioValueMask, 0); }
  public static void AddIoValue(FlatBufferBuilder builder, byte ioValue) { builder.AddByte(13, ioValue, 0); }
  public static Offset<bpio.ConfigurationRequest> EndConfigurationRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<bpio.ConfigurationRequest>(o);
  }
}


static public class ConfigurationRequestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Mode*/, false)
      && verifier.VerifyTable(tablePos, 6 /*ModeConfiguration*/, bpio.ModeConfigurationVerify.Verify, false)
      && verifier.VerifyField(tablePos, 8 /*ModeBitorderMsb*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*ModeBitorderLsb*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*PsuDisable*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*PsuEnable*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*PsuSetMv*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*PsuSetMa*/, 2 /*ushort*/, 2, false)
      && verifier.VerifyField(tablePos, 20 /*PullupDisable*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 22 /*PullupEnable*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 24 /*IoDirectionMask*/, 1 /*byte*/, 1, false)
      && verifier.VerifyField(tablePos, 26 /*IoDirection*/, 1 /*byte*/, 1, false)
      && verifier.VerifyField(tablePos, 28 /*IoValueMask*/, 1 /*byte*/, 1, false)
      && verifier.VerifyField(tablePos, 30 /*IoValue*/, 1 /*byte*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
