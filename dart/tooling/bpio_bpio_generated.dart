// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library bpio;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


enum StatusRequestTypes {
  All(0),
  Version(1),
  Mode(2),
  Pullup(3),
  PSU(4),
  ADC(5),
  IO(6),
  Disk(7),
  LED(8);

  final int value;
  const StatusRequestTypes(this.value);

  factory StatusRequestTypes.fromValue(int value) {
    switch (value) {
      case 0: return StatusRequestTypes.All;
      case 1: return StatusRequestTypes.Version;
      case 2: return StatusRequestTypes.Mode;
      case 3: return StatusRequestTypes.Pullup;
      case 4: return StatusRequestTypes.PSU;
      case 5: return StatusRequestTypes.ADC;
      case 6: return StatusRequestTypes.IO;
      case 7: return StatusRequestTypes.Disk;
      case 8: return StatusRequestTypes.LED;
      default: throw StateError('Invalid value $value for bit flag enum');
    }
  }

  static StatusRequestTypes? _createOrNull(int? value) =>
      value == null ? null : StatusRequestTypes.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 8;
  static const fb.Reader<StatusRequestTypes> reader = _StatusRequestTypesReader();
}

class _StatusRequestTypesReader extends fb.Reader<StatusRequestTypes> {
  const _StatusRequestTypesReader();

  @override
  int get size => 1;

  @override
  StatusRequestTypes read(fb.BufferContext bc, int offset) =>
      StatusRequestTypes.fromValue(const fb.Int8Reader().read(bc, offset));
}

enum Color {
  Red(0),
  Green(1),
  Blue(2);

  final int value;
  const Color(this.value);

  factory Color.fromValue(int value) {
    switch (value) {
      case 0: return Color.Red;
      case 1: return Color.Green;
      case 2: return Color.Blue;
      default: throw StateError('Invalid value $value for bit flag enum');
    }
  }

  static Color? _createOrNull(int? value) =>
      value == null ? null : Color.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static const fb.Reader<Color> reader = _ColorReader();
}

class _ColorReader extends fb.Reader<Color> {
  const _ColorReader();

  @override
  int get size => 1;

  @override
  Color read(fb.BufferContext bc, int offset) =>
      Color.fromValue(const fb.Int8Reader().read(bc, offset));
}

enum EquipmentTypeId {
  NONE(0),
  Weapon(1);

  final int value;
  const EquipmentTypeId(this.value);

  factory EquipmentTypeId.fromValue(int value) {
    switch (value) {
      case 0: return EquipmentTypeId.NONE;
      case 1: return EquipmentTypeId.Weapon;
      default: throw StateError('Invalid value $value for bit flag enum');
    }
  }

  static EquipmentTypeId? _createOrNull(int? value) =>
      value == null ? null : EquipmentTypeId.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static const fb.Reader<EquipmentTypeId> reader = _EquipmentTypeIdReader();
}

class _EquipmentTypeIdReader extends fb.Reader<EquipmentTypeId> {
  const _EquipmentTypeIdReader();

  @override
  int get size => 1;

  @override
  EquipmentTypeId read(fb.BufferContext bc, int offset) =>
      EquipmentTypeId.fromValue(const fb.Uint8Reader().read(bc, offset));
}

enum RequestPacketContentsTypeId {
  NONE(0),
  Monster(1),
  StatusRequest(2),
  ConfigurationRequest(3),
  DataRequest(4);

  final int value;
  const RequestPacketContentsTypeId(this.value);

  factory RequestPacketContentsTypeId.fromValue(int value) {
    switch (value) {
      case 0: return RequestPacketContentsTypeId.NONE;
      case 1: return RequestPacketContentsTypeId.Monster;
      case 2: return RequestPacketContentsTypeId.StatusRequest;
      case 3: return RequestPacketContentsTypeId.ConfigurationRequest;
      case 4: return RequestPacketContentsTypeId.DataRequest;
      default: throw StateError('Invalid value $value for bit flag enum');
    }
  }

  static RequestPacketContentsTypeId? _createOrNull(int? value) =>
      value == null ? null : RequestPacketContentsTypeId.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static const fb.Reader<RequestPacketContentsTypeId> reader = _RequestPacketContentsTypeIdReader();
}

class _RequestPacketContentsTypeIdReader extends fb.Reader<RequestPacketContentsTypeId> {
  const _RequestPacketContentsTypeIdReader();

  @override
  int get size => 1;

  @override
  RequestPacketContentsTypeId read(fb.BufferContext bc, int offset) =>
      RequestPacketContentsTypeId.fromValue(const fb.Uint8Reader().read(bc, offset));
}

enum ResponsePacketContentsTypeId {
  NONE(0),
  ErrorResponse(1),
  Monster(2),
  ConfigurationResponse(3),
  StatusResponse(4),
  DataResponse(5);

  final int value;
  const ResponsePacketContentsTypeId(this.value);

  factory ResponsePacketContentsTypeId.fromValue(int value) {
    switch (value) {
      case 0: return ResponsePacketContentsTypeId.NONE;
      case 1: return ResponsePacketContentsTypeId.ErrorResponse;
      case 2: return ResponsePacketContentsTypeId.Monster;
      case 3: return ResponsePacketContentsTypeId.ConfigurationResponse;
      case 4: return ResponsePacketContentsTypeId.StatusResponse;
      case 5: return ResponsePacketContentsTypeId.DataResponse;
      default: throw StateError('Invalid value $value for bit flag enum');
    }
  }

  static ResponsePacketContentsTypeId? _createOrNull(int? value) =>
      value == null ? null : ResponsePacketContentsTypeId.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static const fb.Reader<ResponsePacketContentsTypeId> reader = _ResponsePacketContentsTypeIdReader();
}

class _ResponsePacketContentsTypeIdReader extends fb.Reader<ResponsePacketContentsTypeId> {
  const _ResponsePacketContentsTypeIdReader();

  @override
  int get size => 1;

  @override
  ResponsePacketContentsTypeId read(fb.BufferContext bc, int offset) =>
      ResponsePacketContentsTypeId.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class StatusRequest {
  StatusRequest._(this._bc, this._bcOffset);
  factory StatusRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StatusRequest> reader = _StatusRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<StatusRequestTypes>? get query => const fb.ListReader<StatusRequestTypes>(StatusRequestTypes.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'StatusRequest{query: ${query}}';
  }
}

class _StatusRequestReader extends fb.TableReader<StatusRequest> {
  const _StatusRequestReader();

  @override
  StatusRequest createObject(fb.BufferContext bc, int offset) => 
    StatusRequest._(bc, offset);
}

class StatusRequestBuilder {
  StatusRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addQueryOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StatusRequestObjectBuilder extends fb.ObjectBuilder {
  final List<StatusRequestTypes>? _query;

  StatusRequestObjectBuilder({
    List<StatusRequestTypes>? query,
  })
      : _query = query;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? queryOffset = _query == null ? null
        : fbBuilder.writeListInt8(_query!.map((f) => f.value).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, queryOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Vec3 {
  Vec3._(this._bc, this._bcOffset);

  static const fb.Reader<Vec3> reader = _Vec3Reader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  double get x => const fb.Float32Reader().read(_bc, _bcOffset + 0);
  double get y => const fb.Float32Reader().read(_bc, _bcOffset + 4);
  double get z => const fb.Float32Reader().read(_bc, _bcOffset + 8);

  @override
  String toString() {
    return 'Vec3{x: ${x}, y: ${y}, z: ${z}}';
  }
}

class _Vec3Reader extends fb.StructReader<Vec3> {
  const _Vec3Reader();

  @override
  int get size => 12;

  @override
  Vec3 createObject(fb.BufferContext bc, int offset) => 
    Vec3._(bc, offset);
}

class Vec3Builder {
  Vec3Builder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(double x, double y, double z) {
    fbBuilder.putFloat32(z);
    fbBuilder.putFloat32(y);
    fbBuilder.putFloat32(x);
    return fbBuilder.offset;
  }

}

class Vec3ObjectBuilder extends fb.ObjectBuilder {
  final double _x;
  final double _y;
  final double _z;

  Vec3ObjectBuilder({
    required double x,
    required double y,
    required double z,
  })
      : _x = x,
        _y = y,
        _z = z;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.putFloat32(_z);
    fbBuilder.putFloat32(_y);
    fbBuilder.putFloat32(_x);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Monster {
  Monster._(this._bc, this._bcOffset);
  factory Monster(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Monster> reader = _MonsterReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Vec3? get pos => Vec3.reader.vTableGetNullable(_bc, _bcOffset, 4);
  int get mana => const fb.Int16Reader().vTableGet(_bc, _bcOffset, 6, 150);
  int get hp => const fb.Int16Reader().vTableGet(_bc, _bcOffset, 8, 100);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  List<int>? get inventory => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 14);
  Color get color => Color.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 16, 2));
  List<Weapon>? get weapons => const fb.ListReader<Weapon>(Weapon.reader).vTableGetNullable(_bc, _bcOffset, 18);
  EquipmentTypeId? get equippedType => EquipmentTypeId._createOrNull(const fb.Uint8Reader().vTableGetNullable(_bc, _bcOffset, 20));
  dynamic get equipped {
    switch (equippedType?.value) {
      case 1: return Weapon.reader.vTableGetNullable(_bc, _bcOffset, 22);
      default: return null;
    }
  }
  List<Vec3>? get path => const fb.ListReader<Vec3>(Vec3.reader).vTableGetNullable(_bc, _bcOffset, 24);

  @override
  String toString() {
    return 'Monster{pos: ${pos}, mana: ${mana}, hp: ${hp}, name: ${name}, inventory: ${inventory}, color: ${color}, weapons: ${weapons}, equippedType: ${equippedType}, equipped: ${equipped}, path: ${path}}';
  }
}

class _MonsterReader extends fb.TableReader<Monster> {
  const _MonsterReader();

  @override
  Monster createObject(fb.BufferContext bc, int offset) => 
    Monster._(bc, offset);
}

class MonsterBuilder {
  MonsterBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(11);
  }

  int addPos(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }
  int addMana(int? mana) {
    fbBuilder.addInt16(1, mana);
    return fbBuilder.offset;
  }
  int addHp(int? hp) {
    fbBuilder.addInt16(2, hp);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addInventoryOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addColor(Color? color) {
    fbBuilder.addInt8(6, color?.value);
    return fbBuilder.offset;
  }
  int addWeaponsOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addEquippedType(EquipmentTypeId? equippedType) {
    fbBuilder.addUint8(8, equippedType?.value);
    return fbBuilder.offset;
  }
  int addEquippedOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addPathOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MonsterObjectBuilder extends fb.ObjectBuilder {
  final Vec3ObjectBuilder? _pos;
  final int? _mana;
  final int? _hp;
  final String? _name;
  final List<int>? _inventory;
  final Color? _color;
  final List<WeaponObjectBuilder>? _weapons;
  final EquipmentTypeId? _equippedType;
  final dynamic _equipped;
  final List<Vec3ObjectBuilder>? _path;

  MonsterObjectBuilder({
    Vec3ObjectBuilder? pos,
    int? mana,
    int? hp,
    String? name,
    List<int>? inventory,
    Color? color,
    List<WeaponObjectBuilder>? weapons,
    EquipmentTypeId? equippedType,
    dynamic equipped,
    List<Vec3ObjectBuilder>? path,
  })
      : _pos = pos,
        _mana = mana,
        _hp = hp,
        _name = name,
        _inventory = inventory,
        _color = color,
        _weapons = weapons,
        _equippedType = equippedType,
        _equipped = equipped,
        _path = path;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? inventoryOffset = _inventory == null ? null
        : fbBuilder.writeListUint8(_inventory!);
    final int? weaponsOffset = _weapons == null ? null
        : fbBuilder.writeList(_weapons!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? equippedOffset = _equipped?.getOrCreateOffset(fbBuilder);
    final int? pathOffset = _path == null ? null
        : fbBuilder.writeListOfStructs(_path!);
    fbBuilder.startTable(11);
    if (_pos != null) {
      fbBuilder.addStruct(0, _pos!.finish(fbBuilder));
    }
    fbBuilder.addInt16(1, _mana);
    fbBuilder.addInt16(2, _hp);
    fbBuilder.addOffset(3, nameOffset);
    fbBuilder.addOffset(5, inventoryOffset);
    fbBuilder.addInt8(6, _color?.value);
    fbBuilder.addOffset(7, weaponsOffset);
    fbBuilder.addUint8(8, _equippedType?.value);
    fbBuilder.addOffset(9, equippedOffset);
    fbBuilder.addOffset(10, pathOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Weapon {
  Weapon._(this._bc, this._bcOffset);
  factory Weapon(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Weapon> reader = _WeaponReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get damage => const fb.Int16Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'Weapon{name: ${name}, damage: ${damage}}';
  }
}

class _WeaponReader extends fb.TableReader<Weapon> {
  const _WeaponReader();

  @override
  Weapon createObject(fb.BufferContext bc, int offset) => 
    Weapon._(bc, offset);
}

class WeaponBuilder {
  WeaponBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDamage(int? damage) {
    fbBuilder.addInt16(1, damage);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WeaponObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final int? _damage;

  WeaponObjectBuilder({
    String? name,
    int? damage,
  })
      : _name = name,
        _damage = damage;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addInt16(1, _damage);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StatusResponse {
  StatusResponse._(this._bc, this._bcOffset);
  factory StatusResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StatusResponse> reader = _StatusResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get error => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  bool get psuEnabled => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);
  int get psuSetMv => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get psuSetMa => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get psuMeasuredMv => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  int get psuMeasuredMa => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  bool get psuCurrentError => const fb.BoolReader().vTableGet(_bc, _bcOffset, 16, false);
  bool get pullupEnabled => const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);
  List<int>? get adcMv => const fb.ListReader<int>(fb.Uint32Reader()).vTableGetNullable(_bc, _bcOffset, 20);
  int get ioDirection => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 22, 0);
  int get ioValue => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 24, 0);
  double get diskSizeMb => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  double get diskUsedMb => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  int get ledCount => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 30, 0);
  int get versionFlatbuffersMajor => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 32, 0);
  int get versionFlatbuffersMinor => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 34, 0);
  int get versionHardwareMajor => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 36, 0);
  int get versionHardwareMinor => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 38, 0);
  int get versionFirmwareMajor => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 40, 0);
  int get versionFirmwareMinor => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 42, 0);
  String? get versionFirmwareGitHash => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  String? get versionFirmwareDate => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  List<String>? get modesAvailable => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 48);
  String? get modeCurrent => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  List<String>? get modePinLabels => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 52);
  bool get modeBitorderMsb => const fb.BoolReader().vTableGet(_bc, _bcOffset, 54, false);
  int get modeMaxPacketSize => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 56, 0);
  int get modeMaxWrite => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 58, 0);
  int get modeMaxRead => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 60, 0);

  @override
  String toString() {
    return 'StatusResponse{error: ${error}, psuEnabled: ${psuEnabled}, psuSetMv: ${psuSetMv}, psuSetMa: ${psuSetMa}, psuMeasuredMv: ${psuMeasuredMv}, psuMeasuredMa: ${psuMeasuredMa}, psuCurrentError: ${psuCurrentError}, pullupEnabled: ${pullupEnabled}, adcMv: ${adcMv}, ioDirection: ${ioDirection}, ioValue: ${ioValue}, diskSizeMb: ${diskSizeMb}, diskUsedMb: ${diskUsedMb}, ledCount: ${ledCount}, versionFlatbuffersMajor: ${versionFlatbuffersMajor}, versionFlatbuffersMinor: ${versionFlatbuffersMinor}, versionHardwareMajor: ${versionHardwareMajor}, versionHardwareMinor: ${versionHardwareMinor}, versionFirmwareMajor: ${versionFirmwareMajor}, versionFirmwareMinor: ${versionFirmwareMinor}, versionFirmwareGitHash: ${versionFirmwareGitHash}, versionFirmwareDate: ${versionFirmwareDate}, modesAvailable: ${modesAvailable}, modeCurrent: ${modeCurrent}, modePinLabels: ${modePinLabels}, modeBitorderMsb: ${modeBitorderMsb}, modeMaxPacketSize: ${modeMaxPacketSize}, modeMaxWrite: ${modeMaxWrite}, modeMaxRead: ${modeMaxRead}}';
  }
}

class _StatusResponseReader extends fb.TableReader<StatusResponse> {
  const _StatusResponseReader();

  @override
  StatusResponse createObject(fb.BufferContext bc, int offset) => 
    StatusResponse._(bc, offset);
}

class StatusResponseBuilder {
  StatusResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(29);
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPsuEnabled(bool? psuEnabled) {
    fbBuilder.addBool(1, psuEnabled);
    return fbBuilder.offset;
  }
  int addPsuSetMv(int? psuSetMv) {
    fbBuilder.addUint32(2, psuSetMv);
    return fbBuilder.offset;
  }
  int addPsuSetMa(int? psuSetMa) {
    fbBuilder.addUint32(3, psuSetMa);
    return fbBuilder.offset;
  }
  int addPsuMeasuredMv(int? psuMeasuredMv) {
    fbBuilder.addUint32(4, psuMeasuredMv);
    return fbBuilder.offset;
  }
  int addPsuMeasuredMa(int? psuMeasuredMa) {
    fbBuilder.addUint32(5, psuMeasuredMa);
    return fbBuilder.offset;
  }
  int addPsuCurrentError(bool? psuCurrentError) {
    fbBuilder.addBool(6, psuCurrentError);
    return fbBuilder.offset;
  }
  int addPullupEnabled(bool? pullupEnabled) {
    fbBuilder.addBool(7, pullupEnabled);
    return fbBuilder.offset;
  }
  int addAdcMvOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addIoDirection(int? ioDirection) {
    fbBuilder.addUint8(9, ioDirection);
    return fbBuilder.offset;
  }
  int addIoValue(int? ioValue) {
    fbBuilder.addUint8(10, ioValue);
    return fbBuilder.offset;
  }
  int addDiskSizeMb(double? diskSizeMb) {
    fbBuilder.addFloat32(11, diskSizeMb);
    return fbBuilder.offset;
  }
  int addDiskUsedMb(double? diskUsedMb) {
    fbBuilder.addFloat32(12, diskUsedMb);
    return fbBuilder.offset;
  }
  int addLedCount(int? ledCount) {
    fbBuilder.addUint8(13, ledCount);
    return fbBuilder.offset;
  }
  int addVersionFlatbuffersMajor(int? versionFlatbuffersMajor) {
    fbBuilder.addUint8(14, versionFlatbuffersMajor);
    return fbBuilder.offset;
  }
  int addVersionFlatbuffersMinor(int? versionFlatbuffersMinor) {
    fbBuilder.addUint16(15, versionFlatbuffersMinor);
    return fbBuilder.offset;
  }
  int addVersionHardwareMajor(int? versionHardwareMajor) {
    fbBuilder.addUint8(16, versionHardwareMajor);
    return fbBuilder.offset;
  }
  int addVersionHardwareMinor(int? versionHardwareMinor) {
    fbBuilder.addUint8(17, versionHardwareMinor);
    return fbBuilder.offset;
  }
  int addVersionFirmwareMajor(int? versionFirmwareMajor) {
    fbBuilder.addUint8(18, versionFirmwareMajor);
    return fbBuilder.offset;
  }
  int addVersionFirmwareMinor(int? versionFirmwareMinor) {
    fbBuilder.addUint8(19, versionFirmwareMinor);
    return fbBuilder.offset;
  }
  int addVersionFirmwareGitHashOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addVersionFirmwareDateOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addModesAvailableOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addModeCurrentOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addModePinLabelsOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addModeBitorderMsb(bool? modeBitorderMsb) {
    fbBuilder.addBool(25, modeBitorderMsb);
    return fbBuilder.offset;
  }
  int addModeMaxPacketSize(int? modeMaxPacketSize) {
    fbBuilder.addUint32(26, modeMaxPacketSize);
    return fbBuilder.offset;
  }
  int addModeMaxWrite(int? modeMaxWrite) {
    fbBuilder.addUint32(27, modeMaxWrite);
    return fbBuilder.offset;
  }
  int addModeMaxRead(int? modeMaxRead) {
    fbBuilder.addUint32(28, modeMaxRead);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StatusResponseObjectBuilder extends fb.ObjectBuilder {
  final String? _error;
  final bool? _psuEnabled;
  final int? _psuSetMv;
  final int? _psuSetMa;
  final int? _psuMeasuredMv;
  final int? _psuMeasuredMa;
  final bool? _psuCurrentError;
  final bool? _pullupEnabled;
  final List<int>? _adcMv;
  final int? _ioDirection;
  final int? _ioValue;
  final double? _diskSizeMb;
  final double? _diskUsedMb;
  final int? _ledCount;
  final int? _versionFlatbuffersMajor;
  final int? _versionFlatbuffersMinor;
  final int? _versionHardwareMajor;
  final int? _versionHardwareMinor;
  final int? _versionFirmwareMajor;
  final int? _versionFirmwareMinor;
  final String? _versionFirmwareGitHash;
  final String? _versionFirmwareDate;
  final List<String>? _modesAvailable;
  final String? _modeCurrent;
  final List<String>? _modePinLabels;
  final bool? _modeBitorderMsb;
  final int? _modeMaxPacketSize;
  final int? _modeMaxWrite;
  final int? _modeMaxRead;

  StatusResponseObjectBuilder({
    String? error,
    bool? psuEnabled,
    int? psuSetMv,
    int? psuSetMa,
    int? psuMeasuredMv,
    int? psuMeasuredMa,
    bool? psuCurrentError,
    bool? pullupEnabled,
    List<int>? adcMv,
    int? ioDirection,
    int? ioValue,
    double? diskSizeMb,
    double? diskUsedMb,
    int? ledCount,
    int? versionFlatbuffersMajor,
    int? versionFlatbuffersMinor,
    int? versionHardwareMajor,
    int? versionHardwareMinor,
    int? versionFirmwareMajor,
    int? versionFirmwareMinor,
    String? versionFirmwareGitHash,
    String? versionFirmwareDate,
    List<String>? modesAvailable,
    String? modeCurrent,
    List<String>? modePinLabels,
    bool? modeBitorderMsb,
    int? modeMaxPacketSize,
    int? modeMaxWrite,
    int? modeMaxRead,
  })
      : _error = error,
        _psuEnabled = psuEnabled,
        _psuSetMv = psuSetMv,
        _psuSetMa = psuSetMa,
        _psuMeasuredMv = psuMeasuredMv,
        _psuMeasuredMa = psuMeasuredMa,
        _psuCurrentError = psuCurrentError,
        _pullupEnabled = pullupEnabled,
        _adcMv = adcMv,
        _ioDirection = ioDirection,
        _ioValue = ioValue,
        _diskSizeMb = diskSizeMb,
        _diskUsedMb = diskUsedMb,
        _ledCount = ledCount,
        _versionFlatbuffersMajor = versionFlatbuffersMajor,
        _versionFlatbuffersMinor = versionFlatbuffersMinor,
        _versionHardwareMajor = versionHardwareMajor,
        _versionHardwareMinor = versionHardwareMinor,
        _versionFirmwareMajor = versionFirmwareMajor,
        _versionFirmwareMinor = versionFirmwareMinor,
        _versionFirmwareGitHash = versionFirmwareGitHash,
        _versionFirmwareDate = versionFirmwareDate,
        _modesAvailable = modesAvailable,
        _modeCurrent = modeCurrent,
        _modePinLabels = modePinLabels,
        _modeBitorderMsb = modeBitorderMsb,
        _modeMaxPacketSize = modeMaxPacketSize,
        _modeMaxWrite = modeMaxWrite,
        _modeMaxRead = modeMaxRead;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? errorOffset = _error == null ? null
        : fbBuilder.writeString(_error!);
    final int? adcMvOffset = _adcMv == null ? null
        : fbBuilder.writeListUint32(_adcMv!);
    final int? versionFirmwareGitHashOffset = _versionFirmwareGitHash == null ? null
        : fbBuilder.writeString(_versionFirmwareGitHash!);
    final int? versionFirmwareDateOffset = _versionFirmwareDate == null ? null
        : fbBuilder.writeString(_versionFirmwareDate!);
    final int? modesAvailableOffset = _modesAvailable == null ? null
        : fbBuilder.writeList(_modesAvailable!.map(fbBuilder.writeString).toList());
    final int? modeCurrentOffset = _modeCurrent == null ? null
        : fbBuilder.writeString(_modeCurrent!);
    final int? modePinLabelsOffset = _modePinLabels == null ? null
        : fbBuilder.writeList(_modePinLabels!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(29);
    fbBuilder.addOffset(0, errorOffset);
    fbBuilder.addBool(1, _psuEnabled);
    fbBuilder.addUint32(2, _psuSetMv);
    fbBuilder.addUint32(3, _psuSetMa);
    fbBuilder.addUint32(4, _psuMeasuredMv);
    fbBuilder.addUint32(5, _psuMeasuredMa);
    fbBuilder.addBool(6, _psuCurrentError);
    fbBuilder.addBool(7, _pullupEnabled);
    fbBuilder.addOffset(8, adcMvOffset);
    fbBuilder.addUint8(9, _ioDirection);
    fbBuilder.addUint8(10, _ioValue);
    fbBuilder.addFloat32(11, _diskSizeMb);
    fbBuilder.addFloat32(12, _diskUsedMb);
    fbBuilder.addUint8(13, _ledCount);
    fbBuilder.addUint8(14, _versionFlatbuffersMajor);
    fbBuilder.addUint16(15, _versionFlatbuffersMinor);
    fbBuilder.addUint8(16, _versionHardwareMajor);
    fbBuilder.addUint8(17, _versionHardwareMinor);
    fbBuilder.addUint8(18, _versionFirmwareMajor);
    fbBuilder.addUint8(19, _versionFirmwareMinor);
    fbBuilder.addOffset(20, versionFirmwareGitHashOffset);
    fbBuilder.addOffset(21, versionFirmwareDateOffset);
    fbBuilder.addOffset(22, modesAvailableOffset);
    fbBuilder.addOffset(23, modeCurrentOffset);
    fbBuilder.addOffset(24, modePinLabelsOffset);
    fbBuilder.addBool(25, _modeBitorderMsb);
    fbBuilder.addUint32(26, _modeMaxPacketSize);
    fbBuilder.addUint32(27, _modeMaxWrite);
    fbBuilder.addUint32(28, _modeMaxRead);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ModeConfiguration {
  ModeConfiguration._(this._bc, this._bcOffset);
  factory ModeConfiguration(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ModeConfiguration> reader = _ModeConfigurationReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get speed => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 20000);
  int get dataBits => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 8);
  bool get parity => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  int get stopBits => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 10, 1);
  bool get flowControl => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);
  bool get signalInversion => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);
  int get submode => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 16, 0);
  int get txModulation => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  int get rxSensor => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 20, 0);

  @override
  String toString() {
    return 'ModeConfiguration{speed: ${speed}, dataBits: ${dataBits}, parity: ${parity}, stopBits: ${stopBits}, flowControl: ${flowControl}, signalInversion: ${signalInversion}, submode: ${submode}, txModulation: ${txModulation}, rxSensor: ${rxSensor}}';
  }
}

class _ModeConfigurationReader extends fb.TableReader<ModeConfiguration> {
  const _ModeConfigurationReader();

  @override
  ModeConfiguration createObject(fb.BufferContext bc, int offset) => 
    ModeConfiguration._(bc, offset);
}

class ModeConfigurationBuilder {
  ModeConfigurationBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(9);
  }

  int addSpeed(int? speed) {
    fbBuilder.addUint32(0, speed);
    return fbBuilder.offset;
  }
  int addDataBits(int? dataBits) {
    fbBuilder.addUint8(1, dataBits);
    return fbBuilder.offset;
  }
  int addParity(bool? parity) {
    fbBuilder.addBool(2, parity);
    return fbBuilder.offset;
  }
  int addStopBits(int? stopBits) {
    fbBuilder.addUint8(3, stopBits);
    return fbBuilder.offset;
  }
  int addFlowControl(bool? flowControl) {
    fbBuilder.addBool(4, flowControl);
    return fbBuilder.offset;
  }
  int addSignalInversion(bool? signalInversion) {
    fbBuilder.addBool(5, signalInversion);
    return fbBuilder.offset;
  }
  int addSubmode(int? submode) {
    fbBuilder.addUint8(6, submode);
    return fbBuilder.offset;
  }
  int addTxModulation(int? txModulation) {
    fbBuilder.addUint32(7, txModulation);
    return fbBuilder.offset;
  }
  int addRxSensor(int? rxSensor) {
    fbBuilder.addUint8(8, rxSensor);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ModeConfigurationObjectBuilder extends fb.ObjectBuilder {
  final int? _speed;
  final int? _dataBits;
  final bool? _parity;
  final int? _stopBits;
  final bool? _flowControl;
  final bool? _signalInversion;
  final int? _submode;
  final int? _txModulation;
  final int? _rxSensor;

  ModeConfigurationObjectBuilder({
    int? speed,
    int? dataBits,
    bool? parity,
    int? stopBits,
    bool? flowControl,
    bool? signalInversion,
    int? submode,
    int? txModulation,
    int? rxSensor,
  })
      : _speed = speed,
        _dataBits = dataBits,
        _parity = parity,
        _stopBits = stopBits,
        _flowControl = flowControl,
        _signalInversion = signalInversion,
        _submode = submode,
        _txModulation = txModulation,
        _rxSensor = rxSensor;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(9);
    fbBuilder.addUint32(0, _speed);
    fbBuilder.addUint8(1, _dataBits);
    fbBuilder.addBool(2, _parity);
    fbBuilder.addUint8(3, _stopBits);
    fbBuilder.addBool(4, _flowControl);
    fbBuilder.addBool(5, _signalInversion);
    fbBuilder.addUint8(6, _submode);
    fbBuilder.addUint32(7, _txModulation);
    fbBuilder.addUint8(8, _rxSensor);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ConfigurationRequest {
  ConfigurationRequest._(this._bc, this._bcOffset);
  factory ConfigurationRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ConfigurationRequest> reader = _ConfigurationRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get mode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ModeConfiguration? get modeConfiguration => ModeConfiguration.reader.vTableGetNullable(_bc, _bcOffset, 6);
  bool get modeBitorderMsb => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  bool get modeBitorderLsb => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  bool get psuDisable => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);
  bool get psuEnable => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);
  int get psuSetMv => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  int get psuSetMa => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 18, 300);
  bool get pullupDisable => const fb.BoolReader().vTableGet(_bc, _bcOffset, 20, false);
  bool get pullupEnable => const fb.BoolReader().vTableGet(_bc, _bcOffset, 22, false);
  int get ioDirectionMask => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 24, 0);
  int get ioDirection => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 26, 0);
  int get ioValueMask => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 28, 0);
  int get ioValue => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 30, 0);

  @override
  String toString() {
    return 'ConfigurationRequest{mode: ${mode}, modeConfiguration: ${modeConfiguration}, modeBitorderMsb: ${modeBitorderMsb}, modeBitorderLsb: ${modeBitorderLsb}, psuDisable: ${psuDisable}, psuEnable: ${psuEnable}, psuSetMv: ${psuSetMv}, psuSetMa: ${psuSetMa}, pullupDisable: ${pullupDisable}, pullupEnable: ${pullupEnable}, ioDirectionMask: ${ioDirectionMask}, ioDirection: ${ioDirection}, ioValueMask: ${ioValueMask}, ioValue: ${ioValue}}';
  }
}

class _ConfigurationRequestReader extends fb.TableReader<ConfigurationRequest> {
  const _ConfigurationRequestReader();

  @override
  ConfigurationRequest createObject(fb.BufferContext bc, int offset) => 
    ConfigurationRequest._(bc, offset);
}

class ConfigurationRequestBuilder {
  ConfigurationRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(14);
  }

  int addModeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addModeConfigurationOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addModeBitorderMsb(bool? modeBitorderMsb) {
    fbBuilder.addBool(2, modeBitorderMsb);
    return fbBuilder.offset;
  }
  int addModeBitorderLsb(bool? modeBitorderLsb) {
    fbBuilder.addBool(3, modeBitorderLsb);
    return fbBuilder.offset;
  }
  int addPsuDisable(bool? psuDisable) {
    fbBuilder.addBool(4, psuDisable);
    return fbBuilder.offset;
  }
  int addPsuEnable(bool? psuEnable) {
    fbBuilder.addBool(5, psuEnable);
    return fbBuilder.offset;
  }
  int addPsuSetMv(int? psuSetMv) {
    fbBuilder.addUint32(6, psuSetMv);
    return fbBuilder.offset;
  }
  int addPsuSetMa(int? psuSetMa) {
    fbBuilder.addUint16(7, psuSetMa);
    return fbBuilder.offset;
  }
  int addPullupDisable(bool? pullupDisable) {
    fbBuilder.addBool(8, pullupDisable);
    return fbBuilder.offset;
  }
  int addPullupEnable(bool? pullupEnable) {
    fbBuilder.addBool(9, pullupEnable);
    return fbBuilder.offset;
  }
  int addIoDirectionMask(int? ioDirectionMask) {
    fbBuilder.addUint8(10, ioDirectionMask);
    return fbBuilder.offset;
  }
  int addIoDirection(int? ioDirection) {
    fbBuilder.addUint8(11, ioDirection);
    return fbBuilder.offset;
  }
  int addIoValueMask(int? ioValueMask) {
    fbBuilder.addUint8(12, ioValueMask);
    return fbBuilder.offset;
  }
  int addIoValue(int? ioValue) {
    fbBuilder.addUint8(13, ioValue);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ConfigurationRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _mode;
  final ModeConfigurationObjectBuilder? _modeConfiguration;
  final bool? _modeBitorderMsb;
  final bool? _modeBitorderLsb;
  final bool? _psuDisable;
  final bool? _psuEnable;
  final int? _psuSetMv;
  final int? _psuSetMa;
  final bool? _pullupDisable;
  final bool? _pullupEnable;
  final int? _ioDirectionMask;
  final int? _ioDirection;
  final int? _ioValueMask;
  final int? _ioValue;

  ConfigurationRequestObjectBuilder({
    String? mode,
    ModeConfigurationObjectBuilder? modeConfiguration,
    bool? modeBitorderMsb,
    bool? modeBitorderLsb,
    bool? psuDisable,
    bool? psuEnable,
    int? psuSetMv,
    int? psuSetMa,
    bool? pullupDisable,
    bool? pullupEnable,
    int? ioDirectionMask,
    int? ioDirection,
    int? ioValueMask,
    int? ioValue,
  })
      : _mode = mode,
        _modeConfiguration = modeConfiguration,
        _modeBitorderMsb = modeBitorderMsb,
        _modeBitorderLsb = modeBitorderLsb,
        _psuDisable = psuDisable,
        _psuEnable = psuEnable,
        _psuSetMv = psuSetMv,
        _psuSetMa = psuSetMa,
        _pullupDisable = pullupDisable,
        _pullupEnable = pullupEnable,
        _ioDirectionMask = ioDirectionMask,
        _ioDirection = ioDirection,
        _ioValueMask = ioValueMask,
        _ioValue = ioValue;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? modeOffset = _mode == null ? null
        : fbBuilder.writeString(_mode!);
    final int? modeConfigurationOffset = _modeConfiguration?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(14);
    fbBuilder.addOffset(0, modeOffset);
    fbBuilder.addOffset(1, modeConfigurationOffset);
    fbBuilder.addBool(2, _modeBitorderMsb);
    fbBuilder.addBool(3, _modeBitorderLsb);
    fbBuilder.addBool(4, _psuDisable);
    fbBuilder.addBool(5, _psuEnable);
    fbBuilder.addUint32(6, _psuSetMv);
    fbBuilder.addUint16(7, _psuSetMa);
    fbBuilder.addBool(8, _pullupDisable);
    fbBuilder.addBool(9, _pullupEnable);
    fbBuilder.addUint8(10, _ioDirectionMask);
    fbBuilder.addUint8(11, _ioDirection);
    fbBuilder.addUint8(12, _ioValueMask);
    fbBuilder.addUint8(13, _ioValue);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ConfigurationResponse {
  ConfigurationResponse._(this._bc, this._bcOffset);
  factory ConfigurationResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ConfigurationResponse> reader = _ConfigurationResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get error => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ConfigurationResponse{error: ${error}}';
  }
}

class _ConfigurationResponseReader extends fb.TableReader<ConfigurationResponse> {
  const _ConfigurationResponseReader();

  @override
  ConfigurationResponse createObject(fb.BufferContext bc, int offset) => 
    ConfigurationResponse._(bc, offset);
}

class ConfigurationResponseBuilder {
  ConfigurationResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ConfigurationResponseObjectBuilder extends fb.ObjectBuilder {
  final String? _error;

  ConfigurationResponseObjectBuilder({
    String? error,
  })
      : _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? errorOffset = _error == null ? null
        : fbBuilder.writeString(_error!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DataRequest {
  DataRequest._(this._bc, this._bcOffset);
  factory DataRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DataRequest> reader = _DataRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get startMain => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  bool get startAlt => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);
  List<int>? get dataWrite => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'DataRequest{startMain: ${startMain}, startAlt: ${startAlt}, dataWrite: ${dataWrite}}';
  }
}

class _DataRequestReader extends fb.TableReader<DataRequest> {
  const _DataRequestReader();

  @override
  DataRequest createObject(fb.BufferContext bc, int offset) => 
    DataRequest._(bc, offset);
}

class DataRequestBuilder {
  DataRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addStartMain(bool? startMain) {
    fbBuilder.addBool(0, startMain);
    return fbBuilder.offset;
  }
  int addStartAlt(bool? startAlt) {
    fbBuilder.addBool(1, startAlt);
    return fbBuilder.offset;
  }
  int addDataWriteOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DataRequestObjectBuilder extends fb.ObjectBuilder {
  final bool? _startMain;
  final bool? _startAlt;
  final List<int>? _dataWrite;

  DataRequestObjectBuilder({
    bool? startMain,
    bool? startAlt,
    List<int>? dataWrite,
  })
      : _startMain = startMain,
        _startAlt = startAlt,
        _dataWrite = dataWrite;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? dataWriteOffset = _dataWrite == null ? null
        : fbBuilder.writeListUint8(_dataWrite!);
    fbBuilder.startTable(3);
    fbBuilder.addBool(0, _startMain);
    fbBuilder.addBool(1, _startAlt);
    fbBuilder.addOffset(2, dataWriteOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DataResponse {
  DataResponse._(this._bc, this._bcOffset);
  factory DataResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DataResponse> reader = _DataResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get error => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<int>? get dataRead => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'DataResponse{error: ${error}, dataRead: ${dataRead}}';
  }
}

class _DataResponseReader extends fb.TableReader<DataResponse> {
  const _DataResponseReader();

  @override
  DataResponse createObject(fb.BufferContext bc, int offset) => 
    DataResponse._(bc, offset);
}

class DataResponseBuilder {
  DataResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDataReadOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DataResponseObjectBuilder extends fb.ObjectBuilder {
  final String? _error;
  final List<int>? _dataRead;

  DataResponseObjectBuilder({
    String? error,
    List<int>? dataRead,
  })
      : _error = error,
        _dataRead = dataRead;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? errorOffset = _error == null ? null
        : fbBuilder.writeString(_error!);
    final int? dataReadOffset = _dataRead == null ? null
        : fbBuilder.writeListUint8(_dataRead!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, errorOffset);
    fbBuilder.addOffset(1, dataReadOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ErrorResponse {
  ErrorResponse._(this._bc, this._bcOffset);
  factory ErrorResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ErrorResponse> reader = _ErrorResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get error => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ErrorResponse{error: ${error}}';
  }
}

class _ErrorResponseReader extends fb.TableReader<ErrorResponse> {
  const _ErrorResponseReader();

  @override
  ErrorResponse createObject(fb.BufferContext bc, int offset) => 
    ErrorResponse._(bc, offset);
}

class ErrorResponseBuilder {
  ErrorResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ErrorResponseObjectBuilder extends fb.ObjectBuilder {
  final String? _error;

  ErrorResponseObjectBuilder({
    String? error,
  })
      : _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? errorOffset = _error == null ? null
        : fbBuilder.writeString(_error!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class RequestPacket {
  RequestPacket._(this._bc, this._bcOffset);
  factory RequestPacket(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RequestPacket> reader = _RequestPacketReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get versionMajor => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get minimumVersionMinor => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 6, 0);
  RequestPacketContentsTypeId? get contentsType => RequestPacketContentsTypeId._createOrNull(const fb.Uint8Reader().vTableGetNullable(_bc, _bcOffset, 8));
  dynamic get contents {
    switch (contentsType?.value) {
      case 1: return Monster.reader.vTableGetNullable(_bc, _bcOffset, 10);
      case 2: return StatusRequest.reader.vTableGetNullable(_bc, _bcOffset, 10);
      case 3: return ConfigurationRequest.reader.vTableGetNullable(_bc, _bcOffset, 10);
      case 4: return DataRequest.reader.vTableGetNullable(_bc, _bcOffset, 10);
      default: return null;
    }
  }

  @override
  String toString() {
    return 'RequestPacket{versionMajor: ${versionMajor}, minimumVersionMinor: ${minimumVersionMinor}, contentsType: ${contentsType}, contents: ${contents}}';
  }
}

class _RequestPacketReader extends fb.TableReader<RequestPacket> {
  const _RequestPacketReader();

  @override
  RequestPacket createObject(fb.BufferContext bc, int offset) => 
    RequestPacket._(bc, offset);
}

class RequestPacketBuilder {
  RequestPacketBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addVersionMajor(int? versionMajor) {
    fbBuilder.addUint8(0, versionMajor);
    return fbBuilder.offset;
  }
  int addMinimumVersionMinor(int? minimumVersionMinor) {
    fbBuilder.addUint16(1, minimumVersionMinor);
    return fbBuilder.offset;
  }
  int addContentsType(RequestPacketContentsTypeId? contentsType) {
    fbBuilder.addUint8(2, contentsType?.value);
    return fbBuilder.offset;
  }
  int addContentsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RequestPacketObjectBuilder extends fb.ObjectBuilder {
  final int? _versionMajor;
  final int? _minimumVersionMinor;
  final RequestPacketContentsTypeId? _contentsType;
  final dynamic _contents;

  RequestPacketObjectBuilder({
    int? versionMajor,
    int? minimumVersionMinor,
    RequestPacketContentsTypeId? contentsType,
    dynamic contents,
  })
      : _versionMajor = versionMajor,
        _minimumVersionMinor = minimumVersionMinor,
        _contentsType = contentsType,
        _contents = contents;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? contentsOffset = _contents?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addUint8(0, _versionMajor);
    fbBuilder.addUint16(1, _minimumVersionMinor);
    fbBuilder.addUint8(2, _contentsType?.value);
    fbBuilder.addOffset(3, contentsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResponsePacket {
  ResponsePacket._(this._bc, this._bcOffset);
  factory ResponsePacket(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResponsePacket> reader = _ResponsePacketReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get error => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ResponsePacketContentsTypeId? get contentsType => ResponsePacketContentsTypeId._createOrNull(const fb.Uint8Reader().vTableGetNullable(_bc, _bcOffset, 6));
  dynamic get contents {
    switch (contentsType?.value) {
      case 1: return ErrorResponse.reader.vTableGetNullable(_bc, _bcOffset, 8);
      case 2: return Monster.reader.vTableGetNullable(_bc, _bcOffset, 8);
      case 3: return ConfigurationResponse.reader.vTableGetNullable(_bc, _bcOffset, 8);
      case 4: return StatusResponse.reader.vTableGetNullable(_bc, _bcOffset, 8);
      case 5: return DataResponse.reader.vTableGetNullable(_bc, _bcOffset, 8);
      default: return null;
    }
  }

  @override
  String toString() {
    return 'ResponsePacket{error: ${error}, contentsType: ${contentsType}, contents: ${contents}}';
  }
}

class _ResponsePacketReader extends fb.TableReader<ResponsePacket> {
  const _ResponsePacketReader();

  @override
  ResponsePacket createObject(fb.BufferContext bc, int offset) => 
    ResponsePacket._(bc, offset);
}

class ResponsePacketBuilder {
  ResponsePacketBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addContentsType(ResponsePacketContentsTypeId? contentsType) {
    fbBuilder.addUint8(1, contentsType?.value);
    return fbBuilder.offset;
  }
  int addContentsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResponsePacketObjectBuilder extends fb.ObjectBuilder {
  final String? _error;
  final ResponsePacketContentsTypeId? _contentsType;
  final dynamic _contents;

  ResponsePacketObjectBuilder({
    String? error,
    ResponsePacketContentsTypeId? contentsType,
    dynamic contents,
  })
      : _error = error,
        _contentsType = contentsType,
        _contents = contents;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? errorOffset = _error == null ? null
        : fbBuilder.writeString(_error!);
    final int? contentsOffset = _contents?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, errorOffset);
    fbBuilder.addUint8(1, _contentsType?.value);
    fbBuilder.addOffset(2, contentsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
